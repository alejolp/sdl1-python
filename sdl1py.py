# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sdl1py', [dirname(__file__)])
        except ImportError:
            import _sdl1py
            return _sdl1py
        if fp is not None:
            try:
                _mod = imp.load_module('_sdl1py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sdl1py = swig_import_helper()
    del swig_import_helper
else:
    import _sdl1py
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SDL_FALSE = _sdl1py.SDL_FALSE
SDL_TRUE = _sdl1py.SDL_TRUE
SDL_INIT_TIMER = _sdl1py.SDL_INIT_TIMER
SDL_INIT_AUDIO = _sdl1py.SDL_INIT_AUDIO
SDL_INIT_VIDEO = _sdl1py.SDL_INIT_VIDEO
SDL_INIT_JOYSTICK = _sdl1py.SDL_INIT_JOYSTICK
SDL_INIT_HAPTIC = _sdl1py.SDL_INIT_HAPTIC
SDL_INIT_NOPARACHUTE = _sdl1py.SDL_INIT_NOPARACHUTE
SDL_INIT_EVERYTHING = _sdl1py.SDL_INIT_EVERYTHING

def SDL_Init(*args):
  return _sdl1py.SDL_Init(*args)
SDL_Init = _sdl1py.SDL_Init

def SDL_InitSubSystem(*args):
  return _sdl1py.SDL_InitSubSystem(*args)
SDL_InitSubSystem = _sdl1py.SDL_InitSubSystem

def SDL_QuitSubSystem(*args):
  return _sdl1py.SDL_QuitSubSystem(*args)
SDL_QuitSubSystem = _sdl1py.SDL_QuitSubSystem

def SDL_WasInit(*args):
  return _sdl1py.SDL_WasInit(*args)
SDL_WasInit = _sdl1py.SDL_WasInit

def SDL_Quit():
  return _sdl1py.SDL_Quit()
SDL_Quit = _sdl1py.SDL_Quit

def SDL_SetError(*args):
  return _sdl1py.SDL_SetError(*args)
SDL_SetError = _sdl1py.SDL_SetError

def SDL_GetError():
  return _sdl1py.SDL_GetError()
SDL_GetError = _sdl1py.SDL_GetError

def SDL_ClearError():
  return _sdl1py.SDL_ClearError()
SDL_ClearError = _sdl1py.SDL_ClearError
class SDL_version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_version, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _sdl1py.SDL_version_major_set
    __swig_getmethods__["major"] = _sdl1py.SDL_version_major_get
    if _newclass:major = _swig_property(_sdl1py.SDL_version_major_get, _sdl1py.SDL_version_major_set)
    __swig_setmethods__["minor"] = _sdl1py.SDL_version_minor_set
    __swig_getmethods__["minor"] = _sdl1py.SDL_version_minor_get
    if _newclass:minor = _swig_property(_sdl1py.SDL_version_minor_get, _sdl1py.SDL_version_minor_set)
    __swig_setmethods__["patch"] = _sdl1py.SDL_version_patch_set
    __swig_getmethods__["patch"] = _sdl1py.SDL_version_patch_get
    if _newclass:patch = _swig_property(_sdl1py.SDL_version_patch_get, _sdl1py.SDL_version_patch_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_version()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_version
    __del__ = lambda self : None;
SDL_version_swigregister = _sdl1py.SDL_version_swigregister
SDL_version_swigregister(SDL_version)


def SDL_VERSION(*args):
  return _sdl1py.SDL_VERSION(*args)
SDL_VERSION = _sdl1py.SDL_VERSION

def SDL_VERSIONNUM(*args):
  return _sdl1py.SDL_VERSIONNUM(*args)
SDL_VERSIONNUM = _sdl1py.SDL_VERSIONNUM

def SDL_COMPILEDVERSION():
  return _sdl1py.SDL_COMPILEDVERSION()
SDL_COMPILEDVERSION = _sdl1py.SDL_COMPILEDVERSION

def SDL_VERSION_ATLEAST(*args):
  return _sdl1py.SDL_VERSION_ATLEAST(*args)
SDL_VERSION_ATLEAST = _sdl1py.SDL_VERSION_ATLEAST

def SDL_Linked_Version():
  return _sdl1py.SDL_Linked_Version()
SDL_Linked_Version = _sdl1py.SDL_Linked_Version
SDL_APPMOUSEFOCUS = _sdl1py.SDL_APPMOUSEFOCUS
SDL_APPINPUTFOCUS = _sdl1py.SDL_APPINPUTFOCUS
SDL_APPACTIVE = _sdl1py.SDL_APPACTIVE

def SDL_GetAppState():
  return _sdl1py.SDL_GetAppState()
SDL_GetAppState = _sdl1py.SDL_GetAppState
SDL_LIL_ENDIAN = _sdl1py.SDL_LIL_ENDIAN
SDL_BIG_ENDIAN = _sdl1py.SDL_BIG_ENDIAN
SDL_BYTEORDER = _sdl1py.SDL_BYTEORDER

def SDL_Swap16(*args):
  return _sdl1py.SDL_Swap16(*args)
SDL_Swap16 = _sdl1py.SDL_Swap16

def SDL_Swap32(*args):
  return _sdl1py.SDL_Swap32(*args)
SDL_Swap32 = _sdl1py.SDL_Swap32

def SDL_Swap64(*args):
  return _sdl1py.SDL_Swap64(*args)
SDL_Swap64 = _sdl1py.SDL_Swap64

def SDL_SwapLE16(*args):
  return _sdl1py.SDL_SwapLE16(*args)
SDL_SwapLE16 = _sdl1py.SDL_SwapLE16

def SDL_SwapLE32(*args):
  return _sdl1py.SDL_SwapLE32(*args)
SDL_SwapLE32 = _sdl1py.SDL_SwapLE32

def SDL_SwapLE64(*args):
  return _sdl1py.SDL_SwapLE64(*args)
SDL_SwapLE64 = _sdl1py.SDL_SwapLE64

def SDL_SwapBE16(*args):
  return _sdl1py.SDL_SwapBE16(*args)
SDL_SwapBE16 = _sdl1py.SDL_SwapBE16

def SDL_SwapBE32(*args):
  return _sdl1py.SDL_SwapBE32(*args)
SDL_SwapBE32 = _sdl1py.SDL_SwapBE32

def SDL_SwapBE64(*args):
  return _sdl1py.SDL_SwapBE64(*args)
SDL_SwapBE64 = _sdl1py.SDL_SwapBE64

def SDL_HasRDTSC():
  return _sdl1py.SDL_HasRDTSC()
SDL_HasRDTSC = _sdl1py.SDL_HasRDTSC

def SDL_HasMMX():
  return _sdl1py.SDL_HasMMX()
SDL_HasMMX = _sdl1py.SDL_HasMMX

def SDL_HasMMXExt():
  return _sdl1py.SDL_HasMMXExt()
SDL_HasMMXExt = _sdl1py.SDL_HasMMXExt

def SDL_Has3DNow():
  return _sdl1py.SDL_Has3DNow()
SDL_Has3DNow = _sdl1py.SDL_Has3DNow

def SDL_Has3DNowExt():
  return _sdl1py.SDL_Has3DNowExt()
SDL_Has3DNowExt = _sdl1py.SDL_Has3DNowExt

def SDL_HasSSE():
  return _sdl1py.SDL_HasSSE()
SDL_HasSSE = _sdl1py.SDL_HasSSE

def SDL_HasSSE2():
  return _sdl1py.SDL_HasSSE2()
SDL_HasSSE2 = _sdl1py.SDL_HasSSE2

def SDL_HasAltiVec():
  return _sdl1py.SDL_HasAltiVec()
SDL_HasAltiVec = _sdl1py.SDL_HasAltiVec
SDL_RELEASED = _sdl1py.SDL_RELEASED
SDL_PRESSED = _sdl1py.SDL_PRESSED
SDL_NOEVENT = _sdl1py.SDL_NOEVENT
SDL_ACTIVEEVENT = _sdl1py.SDL_ACTIVEEVENT
SDL_KEYDOWN = _sdl1py.SDL_KEYDOWN
SDL_KEYUP = _sdl1py.SDL_KEYUP
SDL_MOUSEMOTION = _sdl1py.SDL_MOUSEMOTION
SDL_MOUSEBUTTONDOWN = _sdl1py.SDL_MOUSEBUTTONDOWN
SDL_MOUSEBUTTONUP = _sdl1py.SDL_MOUSEBUTTONUP
SDL_JOYAXISMOTION = _sdl1py.SDL_JOYAXISMOTION
SDL_JOYBALLMOTION = _sdl1py.SDL_JOYBALLMOTION
SDL_JOYHATMOTION = _sdl1py.SDL_JOYHATMOTION
SDL_JOYBUTTONDOWN = _sdl1py.SDL_JOYBUTTONDOWN
SDL_JOYBUTTONUP = _sdl1py.SDL_JOYBUTTONUP
SDL_QUIT = _sdl1py.SDL_QUIT
SDL_SYSWMEVENT = _sdl1py.SDL_SYSWMEVENT
SDL_EVENT_RESERVEDA = _sdl1py.SDL_EVENT_RESERVEDA
SDL_EVENT_RESERVEDB = _sdl1py.SDL_EVENT_RESERVEDB
SDL_VIDEORESIZE = _sdl1py.SDL_VIDEORESIZE
SDL_VIDEOEXPOSE = _sdl1py.SDL_VIDEOEXPOSE
SDL_EVENT_RESERVED2 = _sdl1py.SDL_EVENT_RESERVED2
SDL_EVENT_RESERVED3 = _sdl1py.SDL_EVENT_RESERVED3
SDL_EVENT_RESERVED4 = _sdl1py.SDL_EVENT_RESERVED4
SDL_EVENT_RESERVED5 = _sdl1py.SDL_EVENT_RESERVED5
SDL_EVENT_RESERVED6 = _sdl1py.SDL_EVENT_RESERVED6
SDL_EVENT_RESERVED7 = _sdl1py.SDL_EVENT_RESERVED7
SDL_USEREVENT = _sdl1py.SDL_USEREVENT
SDL_NUMEVENTS = _sdl1py.SDL_NUMEVENTS
SDL_ALLEVENTS = _sdl1py.SDL_ALLEVENTS

def SDL_EVENTMASK(*args):
  return _sdl1py.SDL_EVENTMASK(*args)
SDL_EVENTMASK = _sdl1py.SDL_EVENTMASK
class SDL_ActiveEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_ActiveEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_ActiveEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_ActiveEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_ActiveEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_ActiveEvent_type_get, _sdl1py.SDL_ActiveEvent_type_set)
    __swig_setmethods__["gain"] = _sdl1py.SDL_ActiveEvent_gain_set
    __swig_getmethods__["gain"] = _sdl1py.SDL_ActiveEvent_gain_get
    if _newclass:gain = _swig_property(_sdl1py.SDL_ActiveEvent_gain_get, _sdl1py.SDL_ActiveEvent_gain_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_ActiveEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_ActiveEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_ActiveEvent_state_get, _sdl1py.SDL_ActiveEvent_state_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_ActiveEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_ActiveEvent
    __del__ = lambda self : None;
SDL_ActiveEvent_swigregister = _sdl1py.SDL_ActiveEvent_swigregister
SDL_ActiveEvent_swigregister(SDL_ActiveEvent)

class SDL_KeyboardEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_KeyboardEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_KeyboardEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_KeyboardEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_KeyboardEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_KeyboardEvent_type_get, _sdl1py.SDL_KeyboardEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_KeyboardEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_KeyboardEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_KeyboardEvent_which_get, _sdl1py.SDL_KeyboardEvent_which_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_KeyboardEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_KeyboardEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_KeyboardEvent_state_get, _sdl1py.SDL_KeyboardEvent_state_set)
    __swig_setmethods__["keysym"] = _sdl1py.SDL_KeyboardEvent_keysym_set
    __swig_getmethods__["keysym"] = _sdl1py.SDL_KeyboardEvent_keysym_get
    if _newclass:keysym = _swig_property(_sdl1py.SDL_KeyboardEvent_keysym_get, _sdl1py.SDL_KeyboardEvent_keysym_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_KeyboardEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_KeyboardEvent
    __del__ = lambda self : None;
SDL_KeyboardEvent_swigregister = _sdl1py.SDL_KeyboardEvent_swigregister
SDL_KeyboardEvent_swigregister(SDL_KeyboardEvent)

class SDL_MouseMotionEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_MouseMotionEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_MouseMotionEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_MouseMotionEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_MouseMotionEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_MouseMotionEvent_type_get, _sdl1py.SDL_MouseMotionEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_MouseMotionEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_MouseMotionEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_MouseMotionEvent_which_get, _sdl1py.SDL_MouseMotionEvent_which_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_MouseMotionEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_MouseMotionEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_MouseMotionEvent_state_get, _sdl1py.SDL_MouseMotionEvent_state_set)
    __swig_setmethods__["x"] = _sdl1py.SDL_MouseMotionEvent_x_set
    __swig_getmethods__["x"] = _sdl1py.SDL_MouseMotionEvent_x_get
    if _newclass:x = _swig_property(_sdl1py.SDL_MouseMotionEvent_x_get, _sdl1py.SDL_MouseMotionEvent_x_set)
    __swig_setmethods__["y"] = _sdl1py.SDL_MouseMotionEvent_y_set
    __swig_getmethods__["y"] = _sdl1py.SDL_MouseMotionEvent_y_get
    if _newclass:y = _swig_property(_sdl1py.SDL_MouseMotionEvent_y_get, _sdl1py.SDL_MouseMotionEvent_y_set)
    __swig_setmethods__["xrel"] = _sdl1py.SDL_MouseMotionEvent_xrel_set
    __swig_getmethods__["xrel"] = _sdl1py.SDL_MouseMotionEvent_xrel_get
    if _newclass:xrel = _swig_property(_sdl1py.SDL_MouseMotionEvent_xrel_get, _sdl1py.SDL_MouseMotionEvent_xrel_set)
    __swig_setmethods__["yrel"] = _sdl1py.SDL_MouseMotionEvent_yrel_set
    __swig_getmethods__["yrel"] = _sdl1py.SDL_MouseMotionEvent_yrel_get
    if _newclass:yrel = _swig_property(_sdl1py.SDL_MouseMotionEvent_yrel_get, _sdl1py.SDL_MouseMotionEvent_yrel_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_MouseMotionEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_MouseMotionEvent
    __del__ = lambda self : None;
SDL_MouseMotionEvent_swigregister = _sdl1py.SDL_MouseMotionEvent_swigregister
SDL_MouseMotionEvent_swigregister(SDL_MouseMotionEvent)

class SDL_MouseButtonEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_MouseButtonEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_MouseButtonEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_MouseButtonEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_MouseButtonEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_MouseButtonEvent_type_get, _sdl1py.SDL_MouseButtonEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_MouseButtonEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_MouseButtonEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_MouseButtonEvent_which_get, _sdl1py.SDL_MouseButtonEvent_which_set)
    __swig_setmethods__["button"] = _sdl1py.SDL_MouseButtonEvent_button_set
    __swig_getmethods__["button"] = _sdl1py.SDL_MouseButtonEvent_button_get
    if _newclass:button = _swig_property(_sdl1py.SDL_MouseButtonEvent_button_get, _sdl1py.SDL_MouseButtonEvent_button_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_MouseButtonEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_MouseButtonEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_MouseButtonEvent_state_get, _sdl1py.SDL_MouseButtonEvent_state_set)
    __swig_setmethods__["x"] = _sdl1py.SDL_MouseButtonEvent_x_set
    __swig_getmethods__["x"] = _sdl1py.SDL_MouseButtonEvent_x_get
    if _newclass:x = _swig_property(_sdl1py.SDL_MouseButtonEvent_x_get, _sdl1py.SDL_MouseButtonEvent_x_set)
    __swig_setmethods__["y"] = _sdl1py.SDL_MouseButtonEvent_y_set
    __swig_getmethods__["y"] = _sdl1py.SDL_MouseButtonEvent_y_get
    if _newclass:y = _swig_property(_sdl1py.SDL_MouseButtonEvent_y_get, _sdl1py.SDL_MouseButtonEvent_y_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_MouseButtonEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_MouseButtonEvent
    __del__ = lambda self : None;
SDL_MouseButtonEvent_swigregister = _sdl1py.SDL_MouseButtonEvent_swigregister
SDL_MouseButtonEvent_swigregister(SDL_MouseButtonEvent)

class SDL_JoyAxisEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_JoyAxisEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_JoyAxisEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_JoyAxisEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_JoyAxisEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_JoyAxisEvent_type_get, _sdl1py.SDL_JoyAxisEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_JoyAxisEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_JoyAxisEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_JoyAxisEvent_which_get, _sdl1py.SDL_JoyAxisEvent_which_set)
    __swig_setmethods__["axis"] = _sdl1py.SDL_JoyAxisEvent_axis_set
    __swig_getmethods__["axis"] = _sdl1py.SDL_JoyAxisEvent_axis_get
    if _newclass:axis = _swig_property(_sdl1py.SDL_JoyAxisEvent_axis_get, _sdl1py.SDL_JoyAxisEvent_axis_set)
    __swig_setmethods__["value"] = _sdl1py.SDL_JoyAxisEvent_value_set
    __swig_getmethods__["value"] = _sdl1py.SDL_JoyAxisEvent_value_get
    if _newclass:value = _swig_property(_sdl1py.SDL_JoyAxisEvent_value_get, _sdl1py.SDL_JoyAxisEvent_value_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_JoyAxisEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_JoyAxisEvent
    __del__ = lambda self : None;
SDL_JoyAxisEvent_swigregister = _sdl1py.SDL_JoyAxisEvent_swigregister
SDL_JoyAxisEvent_swigregister(SDL_JoyAxisEvent)

class SDL_JoyBallEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_JoyBallEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_JoyBallEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_JoyBallEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_JoyBallEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_JoyBallEvent_type_get, _sdl1py.SDL_JoyBallEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_JoyBallEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_JoyBallEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_JoyBallEvent_which_get, _sdl1py.SDL_JoyBallEvent_which_set)
    __swig_setmethods__["ball"] = _sdl1py.SDL_JoyBallEvent_ball_set
    __swig_getmethods__["ball"] = _sdl1py.SDL_JoyBallEvent_ball_get
    if _newclass:ball = _swig_property(_sdl1py.SDL_JoyBallEvent_ball_get, _sdl1py.SDL_JoyBallEvent_ball_set)
    __swig_setmethods__["xrel"] = _sdl1py.SDL_JoyBallEvent_xrel_set
    __swig_getmethods__["xrel"] = _sdl1py.SDL_JoyBallEvent_xrel_get
    if _newclass:xrel = _swig_property(_sdl1py.SDL_JoyBallEvent_xrel_get, _sdl1py.SDL_JoyBallEvent_xrel_set)
    __swig_setmethods__["yrel"] = _sdl1py.SDL_JoyBallEvent_yrel_set
    __swig_getmethods__["yrel"] = _sdl1py.SDL_JoyBallEvent_yrel_get
    if _newclass:yrel = _swig_property(_sdl1py.SDL_JoyBallEvent_yrel_get, _sdl1py.SDL_JoyBallEvent_yrel_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_JoyBallEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_JoyBallEvent
    __del__ = lambda self : None;
SDL_JoyBallEvent_swigregister = _sdl1py.SDL_JoyBallEvent_swigregister
SDL_JoyBallEvent_swigregister(SDL_JoyBallEvent)

class SDL_JoyHatEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_JoyHatEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_JoyHatEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_JoyHatEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_JoyHatEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_JoyHatEvent_type_get, _sdl1py.SDL_JoyHatEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_JoyHatEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_JoyHatEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_JoyHatEvent_which_get, _sdl1py.SDL_JoyHatEvent_which_set)
    __swig_setmethods__["hat"] = _sdl1py.SDL_JoyHatEvent_hat_set
    __swig_getmethods__["hat"] = _sdl1py.SDL_JoyHatEvent_hat_get
    if _newclass:hat = _swig_property(_sdl1py.SDL_JoyHatEvent_hat_get, _sdl1py.SDL_JoyHatEvent_hat_set)
    __swig_setmethods__["value"] = _sdl1py.SDL_JoyHatEvent_value_set
    __swig_getmethods__["value"] = _sdl1py.SDL_JoyHatEvent_value_get
    if _newclass:value = _swig_property(_sdl1py.SDL_JoyHatEvent_value_get, _sdl1py.SDL_JoyHatEvent_value_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_JoyHatEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_JoyHatEvent
    __del__ = lambda self : None;
SDL_JoyHatEvent_swigregister = _sdl1py.SDL_JoyHatEvent_swigregister
SDL_JoyHatEvent_swigregister(SDL_JoyHatEvent)

class SDL_JoyButtonEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_JoyButtonEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_JoyButtonEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_JoyButtonEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_JoyButtonEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_JoyButtonEvent_type_get, _sdl1py.SDL_JoyButtonEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_JoyButtonEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_JoyButtonEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_JoyButtonEvent_which_get, _sdl1py.SDL_JoyButtonEvent_which_set)
    __swig_setmethods__["button"] = _sdl1py.SDL_JoyButtonEvent_button_set
    __swig_getmethods__["button"] = _sdl1py.SDL_JoyButtonEvent_button_get
    if _newclass:button = _swig_property(_sdl1py.SDL_JoyButtonEvent_button_get, _sdl1py.SDL_JoyButtonEvent_button_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_JoyButtonEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_JoyButtonEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_JoyButtonEvent_state_get, _sdl1py.SDL_JoyButtonEvent_state_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_JoyButtonEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_JoyButtonEvent
    __del__ = lambda self : None;
SDL_JoyButtonEvent_swigregister = _sdl1py.SDL_JoyButtonEvent_swigregister
SDL_JoyButtonEvent_swigregister(SDL_JoyButtonEvent)

class SDL_ResizeEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_ResizeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_ResizeEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_ResizeEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_ResizeEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_ResizeEvent_type_get, _sdl1py.SDL_ResizeEvent_type_set)
    __swig_setmethods__["w"] = _sdl1py.SDL_ResizeEvent_w_set
    __swig_getmethods__["w"] = _sdl1py.SDL_ResizeEvent_w_get
    if _newclass:w = _swig_property(_sdl1py.SDL_ResizeEvent_w_get, _sdl1py.SDL_ResizeEvent_w_set)
    __swig_setmethods__["h"] = _sdl1py.SDL_ResizeEvent_h_set
    __swig_getmethods__["h"] = _sdl1py.SDL_ResizeEvent_h_get
    if _newclass:h = _swig_property(_sdl1py.SDL_ResizeEvent_h_get, _sdl1py.SDL_ResizeEvent_h_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_ResizeEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_ResizeEvent
    __del__ = lambda self : None;
SDL_ResizeEvent_swigregister = _sdl1py.SDL_ResizeEvent_swigregister
SDL_ResizeEvent_swigregister(SDL_ResizeEvent)

class SDL_ExposeEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_ExposeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_ExposeEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_ExposeEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_ExposeEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_ExposeEvent_type_get, _sdl1py.SDL_ExposeEvent_type_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_ExposeEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_ExposeEvent
    __del__ = lambda self : None;
SDL_ExposeEvent_swigregister = _sdl1py.SDL_ExposeEvent_swigregister
SDL_ExposeEvent_swigregister(SDL_ExposeEvent)

class SDL_QuitEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_QuitEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_QuitEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_QuitEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_QuitEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_QuitEvent_type_get, _sdl1py.SDL_QuitEvent_type_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_QuitEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_QuitEvent
    __del__ = lambda self : None;
SDL_QuitEvent_swigregister = _sdl1py.SDL_QuitEvent_swigregister
SDL_QuitEvent_swigregister(SDL_QuitEvent)

class SDL_UserEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_UserEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_UserEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_UserEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_UserEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_UserEvent_type_get, _sdl1py.SDL_UserEvent_type_set)
    __swig_setmethods__["code"] = _sdl1py.SDL_UserEvent_code_set
    __swig_getmethods__["code"] = _sdl1py.SDL_UserEvent_code_get
    if _newclass:code = _swig_property(_sdl1py.SDL_UserEvent_code_get, _sdl1py.SDL_UserEvent_code_set)
    __swig_setmethods__["data1"] = _sdl1py.SDL_UserEvent_data1_set
    __swig_getmethods__["data1"] = _sdl1py.SDL_UserEvent_data1_get
    if _newclass:data1 = _swig_property(_sdl1py.SDL_UserEvent_data1_get, _sdl1py.SDL_UserEvent_data1_set)
    __swig_setmethods__["data2"] = _sdl1py.SDL_UserEvent_data2_set
    __swig_getmethods__["data2"] = _sdl1py.SDL_UserEvent_data2_get
    if _newclass:data2 = _swig_property(_sdl1py.SDL_UserEvent_data2_get, _sdl1py.SDL_UserEvent_data2_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_UserEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_UserEvent
    __del__ = lambda self : None;
SDL_UserEvent_swigregister = _sdl1py.SDL_UserEvent_swigregister
SDL_UserEvent_swigregister(SDL_UserEvent)

class SDL_Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_Event_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_Event_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_Event_type_get, _sdl1py.SDL_Event_type_set)
    __swig_setmethods__["active"] = _sdl1py.SDL_Event_active_set
    __swig_getmethods__["active"] = _sdl1py.SDL_Event_active_get
    if _newclass:active = _swig_property(_sdl1py.SDL_Event_active_get, _sdl1py.SDL_Event_active_set)
    __swig_setmethods__["key"] = _sdl1py.SDL_Event_key_set
    __swig_getmethods__["key"] = _sdl1py.SDL_Event_key_get
    if _newclass:key = _swig_property(_sdl1py.SDL_Event_key_get, _sdl1py.SDL_Event_key_set)
    __swig_setmethods__["motion"] = _sdl1py.SDL_Event_motion_set
    __swig_getmethods__["motion"] = _sdl1py.SDL_Event_motion_get
    if _newclass:motion = _swig_property(_sdl1py.SDL_Event_motion_get, _sdl1py.SDL_Event_motion_set)
    __swig_setmethods__["button"] = _sdl1py.SDL_Event_button_set
    __swig_getmethods__["button"] = _sdl1py.SDL_Event_button_get
    if _newclass:button = _swig_property(_sdl1py.SDL_Event_button_get, _sdl1py.SDL_Event_button_set)
    __swig_setmethods__["jaxis"] = _sdl1py.SDL_Event_jaxis_set
    __swig_getmethods__["jaxis"] = _sdl1py.SDL_Event_jaxis_get
    if _newclass:jaxis = _swig_property(_sdl1py.SDL_Event_jaxis_get, _sdl1py.SDL_Event_jaxis_set)
    __swig_setmethods__["jball"] = _sdl1py.SDL_Event_jball_set
    __swig_getmethods__["jball"] = _sdl1py.SDL_Event_jball_get
    if _newclass:jball = _swig_property(_sdl1py.SDL_Event_jball_get, _sdl1py.SDL_Event_jball_set)
    __swig_setmethods__["jhat"] = _sdl1py.SDL_Event_jhat_set
    __swig_getmethods__["jhat"] = _sdl1py.SDL_Event_jhat_get
    if _newclass:jhat = _swig_property(_sdl1py.SDL_Event_jhat_get, _sdl1py.SDL_Event_jhat_set)
    __swig_setmethods__["jbutton"] = _sdl1py.SDL_Event_jbutton_set
    __swig_getmethods__["jbutton"] = _sdl1py.SDL_Event_jbutton_get
    if _newclass:jbutton = _swig_property(_sdl1py.SDL_Event_jbutton_get, _sdl1py.SDL_Event_jbutton_set)
    __swig_setmethods__["resize"] = _sdl1py.SDL_Event_resize_set
    __swig_getmethods__["resize"] = _sdl1py.SDL_Event_resize_get
    if _newclass:resize = _swig_property(_sdl1py.SDL_Event_resize_get, _sdl1py.SDL_Event_resize_set)
    __swig_setmethods__["expose"] = _sdl1py.SDL_Event_expose_set
    __swig_getmethods__["expose"] = _sdl1py.SDL_Event_expose_get
    if _newclass:expose = _swig_property(_sdl1py.SDL_Event_expose_get, _sdl1py.SDL_Event_expose_set)
    __swig_setmethods__["quit"] = _sdl1py.SDL_Event_quit_set
    __swig_getmethods__["quit"] = _sdl1py.SDL_Event_quit_get
    if _newclass:quit = _swig_property(_sdl1py.SDL_Event_quit_get, _sdl1py.SDL_Event_quit_set)
    __swig_setmethods__["user"] = _sdl1py.SDL_Event_user_set
    __swig_getmethods__["user"] = _sdl1py.SDL_Event_user_get
    if _newclass:user = _swig_property(_sdl1py.SDL_Event_user_get, _sdl1py.SDL_Event_user_set)
    __swig_setmethods__["syswm"] = _sdl1py.SDL_Event_syswm_set
    __swig_getmethods__["syswm"] = _sdl1py.SDL_Event_syswm_get
    if _newclass:syswm = _swig_property(_sdl1py.SDL_Event_syswm_get, _sdl1py.SDL_Event_syswm_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_Event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_Event
    __del__ = lambda self : None;
SDL_Event_swigregister = _sdl1py.SDL_Event_swigregister
SDL_Event_swigregister(SDL_Event)


def SDL_PumpEvents():
  return _sdl1py.SDL_PumpEvents()
SDL_PumpEvents = _sdl1py.SDL_PumpEvents
SDL_ADDEVENT = _sdl1py.SDL_ADDEVENT
SDL_PEEKEVENT = _sdl1py.SDL_PEEKEVENT
SDL_GETEVENT = _sdl1py.SDL_GETEVENT

def SDL_PeepEvents(*args):
  return _sdl1py.SDL_PeepEvents(*args)
SDL_PeepEvents = _sdl1py.SDL_PeepEvents

def SDL_PollEvent(*args):
  return _sdl1py.SDL_PollEvent(*args)
SDL_PollEvent = _sdl1py.SDL_PollEvent

def SDL_WaitEvent(*args):
  return _sdl1py.SDL_WaitEvent(*args)
SDL_WaitEvent = _sdl1py.SDL_WaitEvent

def SDL_PushEvent(*args):
  return _sdl1py.SDL_PushEvent(*args)
SDL_PushEvent = _sdl1py.SDL_PushEvent
SDL_QUERY = _sdl1py.SDL_QUERY
SDL_IGNORE = _sdl1py.SDL_IGNORE
SDL_DISABLE = _sdl1py.SDL_DISABLE
SDL_ENABLE = _sdl1py.SDL_ENABLE

def SDL_EventState(*args):
  return _sdl1py.SDL_EventState(*args)
SDL_EventState = _sdl1py.SDL_EventState

def SDL_QuitRequested():
  return _sdl1py.SDL_QuitRequested()
SDL_QuitRequested = _sdl1py.SDL_QuitRequested
SDLK_UNKNOWN = _sdl1py.SDLK_UNKNOWN
SDLK_FIRST = _sdl1py.SDLK_FIRST
SDLK_BACKSPACE = _sdl1py.SDLK_BACKSPACE
SDLK_TAB = _sdl1py.SDLK_TAB
SDLK_CLEAR = _sdl1py.SDLK_CLEAR
SDLK_RETURN = _sdl1py.SDLK_RETURN
SDLK_PAUSE = _sdl1py.SDLK_PAUSE
SDLK_ESCAPE = _sdl1py.SDLK_ESCAPE
SDLK_SPACE = _sdl1py.SDLK_SPACE
SDLK_EXCLAIM = _sdl1py.SDLK_EXCLAIM
SDLK_QUOTEDBL = _sdl1py.SDLK_QUOTEDBL
SDLK_HASH = _sdl1py.SDLK_HASH
SDLK_DOLLAR = _sdl1py.SDLK_DOLLAR
SDLK_AMPERSAND = _sdl1py.SDLK_AMPERSAND
SDLK_QUOTE = _sdl1py.SDLK_QUOTE
SDLK_LEFTPAREN = _sdl1py.SDLK_LEFTPAREN
SDLK_RIGHTPAREN = _sdl1py.SDLK_RIGHTPAREN
SDLK_ASTERISK = _sdl1py.SDLK_ASTERISK
SDLK_PLUS = _sdl1py.SDLK_PLUS
SDLK_COMMA = _sdl1py.SDLK_COMMA
SDLK_MINUS = _sdl1py.SDLK_MINUS
SDLK_PERIOD = _sdl1py.SDLK_PERIOD
SDLK_SLASH = _sdl1py.SDLK_SLASH
SDLK_0 = _sdl1py.SDLK_0
SDLK_1 = _sdl1py.SDLK_1
SDLK_2 = _sdl1py.SDLK_2
SDLK_3 = _sdl1py.SDLK_3
SDLK_4 = _sdl1py.SDLK_4
SDLK_5 = _sdl1py.SDLK_5
SDLK_6 = _sdl1py.SDLK_6
SDLK_7 = _sdl1py.SDLK_7
SDLK_8 = _sdl1py.SDLK_8
SDLK_9 = _sdl1py.SDLK_9
SDLK_COLON = _sdl1py.SDLK_COLON
SDLK_SEMICOLON = _sdl1py.SDLK_SEMICOLON
SDLK_LESS = _sdl1py.SDLK_LESS
SDLK_EQUALS = _sdl1py.SDLK_EQUALS
SDLK_GREATER = _sdl1py.SDLK_GREATER
SDLK_QUESTION = _sdl1py.SDLK_QUESTION
SDLK_AT = _sdl1py.SDLK_AT
SDLK_LEFTBRACKET = _sdl1py.SDLK_LEFTBRACKET
SDLK_BACKSLASH = _sdl1py.SDLK_BACKSLASH
SDLK_RIGHTBRACKET = _sdl1py.SDLK_RIGHTBRACKET
SDLK_CARET = _sdl1py.SDLK_CARET
SDLK_UNDERSCORE = _sdl1py.SDLK_UNDERSCORE
SDLK_BACKQUOTE = _sdl1py.SDLK_BACKQUOTE
SDLK_a = _sdl1py.SDLK_a
SDLK_b = _sdl1py.SDLK_b
SDLK_c = _sdl1py.SDLK_c
SDLK_d = _sdl1py.SDLK_d
SDLK_e = _sdl1py.SDLK_e
SDLK_f = _sdl1py.SDLK_f
SDLK_g = _sdl1py.SDLK_g
SDLK_h = _sdl1py.SDLK_h
SDLK_i = _sdl1py.SDLK_i
SDLK_j = _sdl1py.SDLK_j
SDLK_k = _sdl1py.SDLK_k
SDLK_l = _sdl1py.SDLK_l
SDLK_m = _sdl1py.SDLK_m
SDLK_n = _sdl1py.SDLK_n
SDLK_o = _sdl1py.SDLK_o
SDLK_p = _sdl1py.SDLK_p
SDLK_q = _sdl1py.SDLK_q
SDLK_r = _sdl1py.SDLK_r
SDLK_s = _sdl1py.SDLK_s
SDLK_t = _sdl1py.SDLK_t
SDLK_u = _sdl1py.SDLK_u
SDLK_v = _sdl1py.SDLK_v
SDLK_w = _sdl1py.SDLK_w
SDLK_x = _sdl1py.SDLK_x
SDLK_y = _sdl1py.SDLK_y
SDLK_z = _sdl1py.SDLK_z
SDLK_DELETE = _sdl1py.SDLK_DELETE
SDLK_WORLD_0 = _sdl1py.SDLK_WORLD_0
SDLK_WORLD_1 = _sdl1py.SDLK_WORLD_1
SDLK_WORLD_2 = _sdl1py.SDLK_WORLD_2
SDLK_WORLD_3 = _sdl1py.SDLK_WORLD_3
SDLK_WORLD_4 = _sdl1py.SDLK_WORLD_4
SDLK_WORLD_5 = _sdl1py.SDLK_WORLD_5
SDLK_WORLD_6 = _sdl1py.SDLK_WORLD_6
SDLK_WORLD_7 = _sdl1py.SDLK_WORLD_7
SDLK_WORLD_8 = _sdl1py.SDLK_WORLD_8
SDLK_WORLD_9 = _sdl1py.SDLK_WORLD_9
SDLK_WORLD_10 = _sdl1py.SDLK_WORLD_10
SDLK_WORLD_11 = _sdl1py.SDLK_WORLD_11
SDLK_WORLD_12 = _sdl1py.SDLK_WORLD_12
SDLK_WORLD_13 = _sdl1py.SDLK_WORLD_13
SDLK_WORLD_14 = _sdl1py.SDLK_WORLD_14
SDLK_WORLD_15 = _sdl1py.SDLK_WORLD_15
SDLK_WORLD_16 = _sdl1py.SDLK_WORLD_16
SDLK_WORLD_17 = _sdl1py.SDLK_WORLD_17
SDLK_WORLD_18 = _sdl1py.SDLK_WORLD_18
SDLK_WORLD_19 = _sdl1py.SDLK_WORLD_19
SDLK_WORLD_20 = _sdl1py.SDLK_WORLD_20
SDLK_WORLD_21 = _sdl1py.SDLK_WORLD_21
SDLK_WORLD_22 = _sdl1py.SDLK_WORLD_22
SDLK_WORLD_23 = _sdl1py.SDLK_WORLD_23
SDLK_WORLD_24 = _sdl1py.SDLK_WORLD_24
SDLK_WORLD_25 = _sdl1py.SDLK_WORLD_25
SDLK_WORLD_26 = _sdl1py.SDLK_WORLD_26
SDLK_WORLD_27 = _sdl1py.SDLK_WORLD_27
SDLK_WORLD_28 = _sdl1py.SDLK_WORLD_28
SDLK_WORLD_29 = _sdl1py.SDLK_WORLD_29
SDLK_WORLD_30 = _sdl1py.SDLK_WORLD_30
SDLK_WORLD_31 = _sdl1py.SDLK_WORLD_31
SDLK_WORLD_32 = _sdl1py.SDLK_WORLD_32
SDLK_WORLD_33 = _sdl1py.SDLK_WORLD_33
SDLK_WORLD_34 = _sdl1py.SDLK_WORLD_34
SDLK_WORLD_35 = _sdl1py.SDLK_WORLD_35
SDLK_WORLD_36 = _sdl1py.SDLK_WORLD_36
SDLK_WORLD_37 = _sdl1py.SDLK_WORLD_37
SDLK_WORLD_38 = _sdl1py.SDLK_WORLD_38
SDLK_WORLD_39 = _sdl1py.SDLK_WORLD_39
SDLK_WORLD_40 = _sdl1py.SDLK_WORLD_40
SDLK_WORLD_41 = _sdl1py.SDLK_WORLD_41
SDLK_WORLD_42 = _sdl1py.SDLK_WORLD_42
SDLK_WORLD_43 = _sdl1py.SDLK_WORLD_43
SDLK_WORLD_44 = _sdl1py.SDLK_WORLD_44
SDLK_WORLD_45 = _sdl1py.SDLK_WORLD_45
SDLK_WORLD_46 = _sdl1py.SDLK_WORLD_46
SDLK_WORLD_47 = _sdl1py.SDLK_WORLD_47
SDLK_WORLD_48 = _sdl1py.SDLK_WORLD_48
SDLK_WORLD_49 = _sdl1py.SDLK_WORLD_49
SDLK_WORLD_50 = _sdl1py.SDLK_WORLD_50
SDLK_WORLD_51 = _sdl1py.SDLK_WORLD_51
SDLK_WORLD_52 = _sdl1py.SDLK_WORLD_52
SDLK_WORLD_53 = _sdl1py.SDLK_WORLD_53
SDLK_WORLD_54 = _sdl1py.SDLK_WORLD_54
SDLK_WORLD_55 = _sdl1py.SDLK_WORLD_55
SDLK_WORLD_56 = _sdl1py.SDLK_WORLD_56
SDLK_WORLD_57 = _sdl1py.SDLK_WORLD_57
SDLK_WORLD_58 = _sdl1py.SDLK_WORLD_58
SDLK_WORLD_59 = _sdl1py.SDLK_WORLD_59
SDLK_WORLD_60 = _sdl1py.SDLK_WORLD_60
SDLK_WORLD_61 = _sdl1py.SDLK_WORLD_61
SDLK_WORLD_62 = _sdl1py.SDLK_WORLD_62
SDLK_WORLD_63 = _sdl1py.SDLK_WORLD_63
SDLK_WORLD_64 = _sdl1py.SDLK_WORLD_64
SDLK_WORLD_65 = _sdl1py.SDLK_WORLD_65
SDLK_WORLD_66 = _sdl1py.SDLK_WORLD_66
SDLK_WORLD_67 = _sdl1py.SDLK_WORLD_67
SDLK_WORLD_68 = _sdl1py.SDLK_WORLD_68
SDLK_WORLD_69 = _sdl1py.SDLK_WORLD_69
SDLK_WORLD_70 = _sdl1py.SDLK_WORLD_70
SDLK_WORLD_71 = _sdl1py.SDLK_WORLD_71
SDLK_WORLD_72 = _sdl1py.SDLK_WORLD_72
SDLK_WORLD_73 = _sdl1py.SDLK_WORLD_73
SDLK_WORLD_74 = _sdl1py.SDLK_WORLD_74
SDLK_WORLD_75 = _sdl1py.SDLK_WORLD_75
SDLK_WORLD_76 = _sdl1py.SDLK_WORLD_76
SDLK_WORLD_77 = _sdl1py.SDLK_WORLD_77
SDLK_WORLD_78 = _sdl1py.SDLK_WORLD_78
SDLK_WORLD_79 = _sdl1py.SDLK_WORLD_79
SDLK_WORLD_80 = _sdl1py.SDLK_WORLD_80
SDLK_WORLD_81 = _sdl1py.SDLK_WORLD_81
SDLK_WORLD_82 = _sdl1py.SDLK_WORLD_82
SDLK_WORLD_83 = _sdl1py.SDLK_WORLD_83
SDLK_WORLD_84 = _sdl1py.SDLK_WORLD_84
SDLK_WORLD_85 = _sdl1py.SDLK_WORLD_85
SDLK_WORLD_86 = _sdl1py.SDLK_WORLD_86
SDLK_WORLD_87 = _sdl1py.SDLK_WORLD_87
SDLK_WORLD_88 = _sdl1py.SDLK_WORLD_88
SDLK_WORLD_89 = _sdl1py.SDLK_WORLD_89
SDLK_WORLD_90 = _sdl1py.SDLK_WORLD_90
SDLK_WORLD_91 = _sdl1py.SDLK_WORLD_91
SDLK_WORLD_92 = _sdl1py.SDLK_WORLD_92
SDLK_WORLD_93 = _sdl1py.SDLK_WORLD_93
SDLK_WORLD_94 = _sdl1py.SDLK_WORLD_94
SDLK_WORLD_95 = _sdl1py.SDLK_WORLD_95
SDLK_KP0 = _sdl1py.SDLK_KP0
SDLK_KP1 = _sdl1py.SDLK_KP1
SDLK_KP2 = _sdl1py.SDLK_KP2
SDLK_KP3 = _sdl1py.SDLK_KP3
SDLK_KP4 = _sdl1py.SDLK_KP4
SDLK_KP5 = _sdl1py.SDLK_KP5
SDLK_KP6 = _sdl1py.SDLK_KP6
SDLK_KP7 = _sdl1py.SDLK_KP7
SDLK_KP8 = _sdl1py.SDLK_KP8
SDLK_KP9 = _sdl1py.SDLK_KP9
SDLK_KP_PERIOD = _sdl1py.SDLK_KP_PERIOD
SDLK_KP_DIVIDE = _sdl1py.SDLK_KP_DIVIDE
SDLK_KP_MULTIPLY = _sdl1py.SDLK_KP_MULTIPLY
SDLK_KP_MINUS = _sdl1py.SDLK_KP_MINUS
SDLK_KP_PLUS = _sdl1py.SDLK_KP_PLUS
SDLK_KP_ENTER = _sdl1py.SDLK_KP_ENTER
SDLK_KP_EQUALS = _sdl1py.SDLK_KP_EQUALS
SDLK_UP = _sdl1py.SDLK_UP
SDLK_DOWN = _sdl1py.SDLK_DOWN
SDLK_RIGHT = _sdl1py.SDLK_RIGHT
SDLK_LEFT = _sdl1py.SDLK_LEFT
SDLK_INSERT = _sdl1py.SDLK_INSERT
SDLK_HOME = _sdl1py.SDLK_HOME
SDLK_END = _sdl1py.SDLK_END
SDLK_PAGEUP = _sdl1py.SDLK_PAGEUP
SDLK_PAGEDOWN = _sdl1py.SDLK_PAGEDOWN
SDLK_F1 = _sdl1py.SDLK_F1
SDLK_F2 = _sdl1py.SDLK_F2
SDLK_F3 = _sdl1py.SDLK_F3
SDLK_F4 = _sdl1py.SDLK_F4
SDLK_F5 = _sdl1py.SDLK_F5
SDLK_F6 = _sdl1py.SDLK_F6
SDLK_F7 = _sdl1py.SDLK_F7
SDLK_F8 = _sdl1py.SDLK_F8
SDLK_F9 = _sdl1py.SDLK_F9
SDLK_F10 = _sdl1py.SDLK_F10
SDLK_F11 = _sdl1py.SDLK_F11
SDLK_F12 = _sdl1py.SDLK_F12
SDLK_F13 = _sdl1py.SDLK_F13
SDLK_F14 = _sdl1py.SDLK_F14
SDLK_F15 = _sdl1py.SDLK_F15
SDLK_NUMLOCK = _sdl1py.SDLK_NUMLOCK
SDLK_CAPSLOCK = _sdl1py.SDLK_CAPSLOCK
SDLK_SCROLLOCK = _sdl1py.SDLK_SCROLLOCK
SDLK_RSHIFT = _sdl1py.SDLK_RSHIFT
SDLK_LSHIFT = _sdl1py.SDLK_LSHIFT
SDLK_RCTRL = _sdl1py.SDLK_RCTRL
SDLK_LCTRL = _sdl1py.SDLK_LCTRL
SDLK_RALT = _sdl1py.SDLK_RALT
SDLK_LALT = _sdl1py.SDLK_LALT
SDLK_RMETA = _sdl1py.SDLK_RMETA
SDLK_LMETA = _sdl1py.SDLK_LMETA
SDLK_LSUPER = _sdl1py.SDLK_LSUPER
SDLK_RSUPER = _sdl1py.SDLK_RSUPER
SDLK_MODE = _sdl1py.SDLK_MODE
SDLK_COMPOSE = _sdl1py.SDLK_COMPOSE
SDLK_HELP = _sdl1py.SDLK_HELP
SDLK_PRINT = _sdl1py.SDLK_PRINT
SDLK_SYSREQ = _sdl1py.SDLK_SYSREQ
SDLK_BREAK = _sdl1py.SDLK_BREAK
SDLK_MENU = _sdl1py.SDLK_MENU
SDLK_POWER = _sdl1py.SDLK_POWER
SDLK_EURO = _sdl1py.SDLK_EURO
SDLK_UNDO = _sdl1py.SDLK_UNDO
SDLK_LAST = _sdl1py.SDLK_LAST
KMOD_NONE = _sdl1py.KMOD_NONE
KMOD_LSHIFT = _sdl1py.KMOD_LSHIFT
KMOD_RSHIFT = _sdl1py.KMOD_RSHIFT
KMOD_LCTRL = _sdl1py.KMOD_LCTRL
KMOD_RCTRL = _sdl1py.KMOD_RCTRL
KMOD_LALT = _sdl1py.KMOD_LALT
KMOD_RALT = _sdl1py.KMOD_RALT
KMOD_LMETA = _sdl1py.KMOD_LMETA
KMOD_RMETA = _sdl1py.KMOD_RMETA
KMOD_NUM = _sdl1py.KMOD_NUM
KMOD_CAPS = _sdl1py.KMOD_CAPS
KMOD_MODE = _sdl1py.KMOD_MODE
KMOD_RESERVED = _sdl1py.KMOD_RESERVED
KMOD_CTRL = _sdl1py.KMOD_CTRL
KMOD_SHIFT = _sdl1py.KMOD_SHIFT
KMOD_ALT = _sdl1py.KMOD_ALT
KMOD_META = _sdl1py.KMOD_META
class SDL_keysym(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_keysym, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_keysym, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scancode"] = _sdl1py.SDL_keysym_scancode_set
    __swig_getmethods__["scancode"] = _sdl1py.SDL_keysym_scancode_get
    if _newclass:scancode = _swig_property(_sdl1py.SDL_keysym_scancode_get, _sdl1py.SDL_keysym_scancode_set)
    __swig_setmethods__["sym"] = _sdl1py.SDL_keysym_sym_set
    __swig_getmethods__["sym"] = _sdl1py.SDL_keysym_sym_get
    if _newclass:sym = _swig_property(_sdl1py.SDL_keysym_sym_get, _sdl1py.SDL_keysym_sym_set)
    __swig_setmethods__["mod"] = _sdl1py.SDL_keysym_mod_set
    __swig_getmethods__["mod"] = _sdl1py.SDL_keysym_mod_get
    if _newclass:mod = _swig_property(_sdl1py.SDL_keysym_mod_get, _sdl1py.SDL_keysym_mod_set)
    __swig_setmethods__["unicode"] = _sdl1py.SDL_keysym_unicode_set
    __swig_getmethods__["unicode"] = _sdl1py.SDL_keysym_unicode_get
    if _newclass:unicode = _swig_property(_sdl1py.SDL_keysym_unicode_get, _sdl1py.SDL_keysym_unicode_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_keysym()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_keysym
    __del__ = lambda self : None;
SDL_keysym_swigregister = _sdl1py.SDL_keysym_swigregister
SDL_keysym_swigregister(SDL_keysym)

SDL_ALL_HOTKEYS = _sdl1py.SDL_ALL_HOTKEYS

def SDL_EnableUNICODE(*args):
  return _sdl1py.SDL_EnableUNICODE(*args)
SDL_EnableUNICODE = _sdl1py.SDL_EnableUNICODE
SDL_DEFAULT_REPEAT_DELAY = _sdl1py.SDL_DEFAULT_REPEAT_DELAY
SDL_DEFAULT_REPEAT_INTERVAL = _sdl1py.SDL_DEFAULT_REPEAT_INTERVAL

def SDL_EnableKeyRepeat(*args):
  return _sdl1py.SDL_EnableKeyRepeat(*args)
SDL_EnableKeyRepeat = _sdl1py.SDL_EnableKeyRepeat

def SDL_GetKeyRepeat(*args):
  return _sdl1py.SDL_GetKeyRepeat(*args)
SDL_GetKeyRepeat = _sdl1py.SDL_GetKeyRepeat

def SDL_GetKeyState(*args):
  return _sdl1py.SDL_GetKeyState(*args)
SDL_GetKeyState = _sdl1py.SDL_GetKeyState

def SDL_GetModState():
  return _sdl1py.SDL_GetModState()
SDL_GetModState = _sdl1py.SDL_GetModState

def SDL_SetModState(*args):
  return _sdl1py.SDL_SetModState(*args)
SDL_SetModState = _sdl1py.SDL_SetModState

def SDL_GetKeyName(*args):
  return _sdl1py.SDL_GetKeyName(*args)
SDL_GetKeyName = _sdl1py.SDL_GetKeyName

def SDL_GetMouseState():
  return _sdl1py.SDL_GetMouseState()
SDL_GetMouseState = _sdl1py.SDL_GetMouseState


