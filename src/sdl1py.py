# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sdl1py', [dirname(__file__)])
        except ImportError:
            import _sdl1py
            return _sdl1py
        if fp is not None:
            try:
                _mod = imp.load_module('_sdl1py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sdl1py = swig_import_helper()
    del swig_import_helper
else:
    import _sdl1py
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SDL_FALSE = _sdl1py.SDL_FALSE
SDL_TRUE = _sdl1py.SDL_TRUE
SDL_INIT_TIMER = _sdl1py.SDL_INIT_TIMER
SDL_INIT_AUDIO = _sdl1py.SDL_INIT_AUDIO
SDL_INIT_VIDEO = _sdl1py.SDL_INIT_VIDEO
SDL_INIT_JOYSTICK = _sdl1py.SDL_INIT_JOYSTICK
SDL_INIT_HAPTIC = _sdl1py.SDL_INIT_HAPTIC
SDL_INIT_NOPARACHUTE = _sdl1py.SDL_INIT_NOPARACHUTE
SDL_INIT_EVERYTHING = _sdl1py.SDL_INIT_EVERYTHING

def SDL_Init(*args) -> "Uint32" :
  return _sdl1py.SDL_Init(*args)
SDL_Init = _sdl1py.SDL_Init

def SDL_InitSubSystem(*args) -> "int" :
  return _sdl1py.SDL_InitSubSystem(*args)
SDL_InitSubSystem = _sdl1py.SDL_InitSubSystem

def SDL_QuitSubSystem(*args) -> "void" :
  return _sdl1py.SDL_QuitSubSystem(*args)
SDL_QuitSubSystem = _sdl1py.SDL_QuitSubSystem

def SDL_WasInit(*args) -> "int" :
  return _sdl1py.SDL_WasInit(*args)
SDL_WasInit = _sdl1py.SDL_WasInit

def SDL_Quit() -> "void" :
  return _sdl1py.SDL_Quit()
SDL_Quit = _sdl1py.SDL_Quit

def SDL_SetError(*args) -> "void" :
  return _sdl1py.SDL_SetError(*args)
SDL_SetError = _sdl1py.SDL_SetError

def SDL_GetError() -> "char const *" :
  return _sdl1py.SDL_GetError()
SDL_GetError = _sdl1py.SDL_GetError

def SDL_ClearError() -> "void" :
  return _sdl1py.SDL_ClearError()
SDL_ClearError = _sdl1py.SDL_ClearError
class SDL_version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_version, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _sdl1py.SDL_version_major_set
    __swig_getmethods__["major"] = _sdl1py.SDL_version_major_get
    if _newclass:major = _swig_property(_sdl1py.SDL_version_major_get, _sdl1py.SDL_version_major_set)
    __swig_setmethods__["minor"] = _sdl1py.SDL_version_minor_set
    __swig_getmethods__["minor"] = _sdl1py.SDL_version_minor_get
    if _newclass:minor = _swig_property(_sdl1py.SDL_version_minor_get, _sdl1py.SDL_version_minor_set)
    __swig_setmethods__["patch"] = _sdl1py.SDL_version_patch_set
    __swig_getmethods__["patch"] = _sdl1py.SDL_version_patch_get
    if _newclass:patch = _swig_property(_sdl1py.SDL_version_patch_get, _sdl1py.SDL_version_patch_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_version()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_version
    __del__ = lambda self : None;
SDL_version_swigregister = _sdl1py.SDL_version_swigregister
SDL_version_swigregister(SDL_version)


def SDL_VERSION(*args) -> "void" :
  return _sdl1py.SDL_VERSION(*args)
SDL_VERSION = _sdl1py.SDL_VERSION

def SDL_VERSIONNUM(*args) -> "int" :
  return _sdl1py.SDL_VERSIONNUM(*args)
SDL_VERSIONNUM = _sdl1py.SDL_VERSIONNUM

def SDL_COMPILEDVERSION() -> "int" :
  return _sdl1py.SDL_COMPILEDVERSION()
SDL_COMPILEDVERSION = _sdl1py.SDL_COMPILEDVERSION

def SDL_VERSION_ATLEAST(*args) -> "int" :
  return _sdl1py.SDL_VERSION_ATLEAST(*args)
SDL_VERSION_ATLEAST = _sdl1py.SDL_VERSION_ATLEAST

def SDL_Linked_Version() -> "SDL_version *" :
  return _sdl1py.SDL_Linked_Version()
SDL_Linked_Version = _sdl1py.SDL_Linked_Version
SDL_APPMOUSEFOCUS = _sdl1py.SDL_APPMOUSEFOCUS
SDL_APPINPUTFOCUS = _sdl1py.SDL_APPINPUTFOCUS
SDL_APPACTIVE = _sdl1py.SDL_APPACTIVE

def SDL_GetAppState() -> "int" :
  return _sdl1py.SDL_GetAppState()
SDL_GetAppState = _sdl1py.SDL_GetAppState
SDL_LIL_ENDIAN = _sdl1py.SDL_LIL_ENDIAN
SDL_BIG_ENDIAN = _sdl1py.SDL_BIG_ENDIAN
SDL_BYTEORDER = _sdl1py.SDL_BYTEORDER

def SDL_Swap16(*args) -> "int" :
  return _sdl1py.SDL_Swap16(*args)
SDL_Swap16 = _sdl1py.SDL_Swap16

def SDL_Swap32(*args) -> "int" :
  return _sdl1py.SDL_Swap32(*args)
SDL_Swap32 = _sdl1py.SDL_Swap32

def SDL_Swap64(*args) -> "int" :
  return _sdl1py.SDL_Swap64(*args)
SDL_Swap64 = _sdl1py.SDL_Swap64

def SDL_SwapLE16(*args) -> "int" :
  return _sdl1py.SDL_SwapLE16(*args)
SDL_SwapLE16 = _sdl1py.SDL_SwapLE16

def SDL_SwapLE32(*args) -> "int" :
  return _sdl1py.SDL_SwapLE32(*args)
SDL_SwapLE32 = _sdl1py.SDL_SwapLE32

def SDL_SwapLE64(*args) -> "int" :
  return _sdl1py.SDL_SwapLE64(*args)
SDL_SwapLE64 = _sdl1py.SDL_SwapLE64

def SDL_SwapBE16(*args) -> "int" :
  return _sdl1py.SDL_SwapBE16(*args)
SDL_SwapBE16 = _sdl1py.SDL_SwapBE16

def SDL_SwapBE32(*args) -> "int" :
  return _sdl1py.SDL_SwapBE32(*args)
SDL_SwapBE32 = _sdl1py.SDL_SwapBE32

def SDL_SwapBE64(*args) -> "int" :
  return _sdl1py.SDL_SwapBE64(*args)
SDL_SwapBE64 = _sdl1py.SDL_SwapBE64

def SDL_HasRDTSC() -> "int" :
  return _sdl1py.SDL_HasRDTSC()
SDL_HasRDTSC = _sdl1py.SDL_HasRDTSC

def SDL_HasMMX() -> "int" :
  return _sdl1py.SDL_HasMMX()
SDL_HasMMX = _sdl1py.SDL_HasMMX

def SDL_HasMMXExt() -> "int" :
  return _sdl1py.SDL_HasMMXExt()
SDL_HasMMXExt = _sdl1py.SDL_HasMMXExt

def SDL_Has3DNow() -> "int" :
  return _sdl1py.SDL_Has3DNow()
SDL_Has3DNow = _sdl1py.SDL_Has3DNow

def SDL_Has3DNowExt() -> "int" :
  return _sdl1py.SDL_Has3DNowExt()
SDL_Has3DNowExt = _sdl1py.SDL_Has3DNowExt

def SDL_HasSSE() -> "int" :
  return _sdl1py.SDL_HasSSE()
SDL_HasSSE = _sdl1py.SDL_HasSSE

def SDL_HasSSE2() -> "int" :
  return _sdl1py.SDL_HasSSE2()
SDL_HasSSE2 = _sdl1py.SDL_HasSSE2

def SDL_HasAltiVec() -> "int" :
  return _sdl1py.SDL_HasAltiVec()
SDL_HasAltiVec = _sdl1py.SDL_HasAltiVec
SDL_RELEASED = _sdl1py.SDL_RELEASED
SDL_PRESSED = _sdl1py.SDL_PRESSED
SDL_NOEVENT = _sdl1py.SDL_NOEVENT
SDL_ACTIVEEVENT = _sdl1py.SDL_ACTIVEEVENT
SDL_KEYDOWN = _sdl1py.SDL_KEYDOWN
SDL_KEYUP = _sdl1py.SDL_KEYUP
SDL_MOUSEMOTION = _sdl1py.SDL_MOUSEMOTION
SDL_MOUSEBUTTONDOWN = _sdl1py.SDL_MOUSEBUTTONDOWN
SDL_MOUSEBUTTONUP = _sdl1py.SDL_MOUSEBUTTONUP
SDL_JOYAXISMOTION = _sdl1py.SDL_JOYAXISMOTION
SDL_JOYBALLMOTION = _sdl1py.SDL_JOYBALLMOTION
SDL_JOYHATMOTION = _sdl1py.SDL_JOYHATMOTION
SDL_JOYBUTTONDOWN = _sdl1py.SDL_JOYBUTTONDOWN
SDL_JOYBUTTONUP = _sdl1py.SDL_JOYBUTTONUP
SDL_QUIT = _sdl1py.SDL_QUIT
SDL_SYSWMEVENT = _sdl1py.SDL_SYSWMEVENT
SDL_EVENT_RESERVEDA = _sdl1py.SDL_EVENT_RESERVEDA
SDL_EVENT_RESERVEDB = _sdl1py.SDL_EVENT_RESERVEDB
SDL_VIDEORESIZE = _sdl1py.SDL_VIDEORESIZE
SDL_VIDEOEXPOSE = _sdl1py.SDL_VIDEOEXPOSE
SDL_EVENT_RESERVED2 = _sdl1py.SDL_EVENT_RESERVED2
SDL_EVENT_RESERVED3 = _sdl1py.SDL_EVENT_RESERVED3
SDL_EVENT_RESERVED4 = _sdl1py.SDL_EVENT_RESERVED4
SDL_EVENT_RESERVED5 = _sdl1py.SDL_EVENT_RESERVED5
SDL_EVENT_RESERVED6 = _sdl1py.SDL_EVENT_RESERVED6
SDL_EVENT_RESERVED7 = _sdl1py.SDL_EVENT_RESERVED7
SDL_USEREVENT = _sdl1py.SDL_USEREVENT
SDL_NUMEVENTS = _sdl1py.SDL_NUMEVENTS
SDL_ALLEVENTS = _sdl1py.SDL_ALLEVENTS

def SDL_EVENTMASK(*args) -> "int" :
  return _sdl1py.SDL_EVENTMASK(*args)
SDL_EVENTMASK = _sdl1py.SDL_EVENTMASK
class SDL_ActiveEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_ActiveEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_ActiveEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_ActiveEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_ActiveEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_ActiveEvent_type_get, _sdl1py.SDL_ActiveEvent_type_set)
    __swig_setmethods__["gain"] = _sdl1py.SDL_ActiveEvent_gain_set
    __swig_getmethods__["gain"] = _sdl1py.SDL_ActiveEvent_gain_get
    if _newclass:gain = _swig_property(_sdl1py.SDL_ActiveEvent_gain_get, _sdl1py.SDL_ActiveEvent_gain_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_ActiveEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_ActiveEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_ActiveEvent_state_get, _sdl1py.SDL_ActiveEvent_state_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_ActiveEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_ActiveEvent
    __del__ = lambda self : None;
SDL_ActiveEvent_swigregister = _sdl1py.SDL_ActiveEvent_swigregister
SDL_ActiveEvent_swigregister(SDL_ActiveEvent)

class SDL_KeyboardEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_KeyboardEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_KeyboardEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_KeyboardEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_KeyboardEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_KeyboardEvent_type_get, _sdl1py.SDL_KeyboardEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_KeyboardEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_KeyboardEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_KeyboardEvent_which_get, _sdl1py.SDL_KeyboardEvent_which_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_KeyboardEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_KeyboardEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_KeyboardEvent_state_get, _sdl1py.SDL_KeyboardEvent_state_set)
    __swig_setmethods__["keysym"] = _sdl1py.SDL_KeyboardEvent_keysym_set
    __swig_getmethods__["keysym"] = _sdl1py.SDL_KeyboardEvent_keysym_get
    if _newclass:keysym = _swig_property(_sdl1py.SDL_KeyboardEvent_keysym_get, _sdl1py.SDL_KeyboardEvent_keysym_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_KeyboardEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_KeyboardEvent
    __del__ = lambda self : None;
SDL_KeyboardEvent_swigregister = _sdl1py.SDL_KeyboardEvent_swigregister
SDL_KeyboardEvent_swigregister(SDL_KeyboardEvent)

class SDL_MouseMotionEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_MouseMotionEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_MouseMotionEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_MouseMotionEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_MouseMotionEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_MouseMotionEvent_type_get, _sdl1py.SDL_MouseMotionEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_MouseMotionEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_MouseMotionEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_MouseMotionEvent_which_get, _sdl1py.SDL_MouseMotionEvent_which_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_MouseMotionEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_MouseMotionEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_MouseMotionEvent_state_get, _sdl1py.SDL_MouseMotionEvent_state_set)
    __swig_setmethods__["x"] = _sdl1py.SDL_MouseMotionEvent_x_set
    __swig_getmethods__["x"] = _sdl1py.SDL_MouseMotionEvent_x_get
    if _newclass:x = _swig_property(_sdl1py.SDL_MouseMotionEvent_x_get, _sdl1py.SDL_MouseMotionEvent_x_set)
    __swig_setmethods__["y"] = _sdl1py.SDL_MouseMotionEvent_y_set
    __swig_getmethods__["y"] = _sdl1py.SDL_MouseMotionEvent_y_get
    if _newclass:y = _swig_property(_sdl1py.SDL_MouseMotionEvent_y_get, _sdl1py.SDL_MouseMotionEvent_y_set)
    __swig_setmethods__["xrel"] = _sdl1py.SDL_MouseMotionEvent_xrel_set
    __swig_getmethods__["xrel"] = _sdl1py.SDL_MouseMotionEvent_xrel_get
    if _newclass:xrel = _swig_property(_sdl1py.SDL_MouseMotionEvent_xrel_get, _sdl1py.SDL_MouseMotionEvent_xrel_set)
    __swig_setmethods__["yrel"] = _sdl1py.SDL_MouseMotionEvent_yrel_set
    __swig_getmethods__["yrel"] = _sdl1py.SDL_MouseMotionEvent_yrel_get
    if _newclass:yrel = _swig_property(_sdl1py.SDL_MouseMotionEvent_yrel_get, _sdl1py.SDL_MouseMotionEvent_yrel_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_MouseMotionEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_MouseMotionEvent
    __del__ = lambda self : None;
SDL_MouseMotionEvent_swigregister = _sdl1py.SDL_MouseMotionEvent_swigregister
SDL_MouseMotionEvent_swigregister(SDL_MouseMotionEvent)

class SDL_MouseButtonEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_MouseButtonEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_MouseButtonEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_MouseButtonEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_MouseButtonEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_MouseButtonEvent_type_get, _sdl1py.SDL_MouseButtonEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_MouseButtonEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_MouseButtonEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_MouseButtonEvent_which_get, _sdl1py.SDL_MouseButtonEvent_which_set)
    __swig_setmethods__["button"] = _sdl1py.SDL_MouseButtonEvent_button_set
    __swig_getmethods__["button"] = _sdl1py.SDL_MouseButtonEvent_button_get
    if _newclass:button = _swig_property(_sdl1py.SDL_MouseButtonEvent_button_get, _sdl1py.SDL_MouseButtonEvent_button_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_MouseButtonEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_MouseButtonEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_MouseButtonEvent_state_get, _sdl1py.SDL_MouseButtonEvent_state_set)
    __swig_setmethods__["x"] = _sdl1py.SDL_MouseButtonEvent_x_set
    __swig_getmethods__["x"] = _sdl1py.SDL_MouseButtonEvent_x_get
    if _newclass:x = _swig_property(_sdl1py.SDL_MouseButtonEvent_x_get, _sdl1py.SDL_MouseButtonEvent_x_set)
    __swig_setmethods__["y"] = _sdl1py.SDL_MouseButtonEvent_y_set
    __swig_getmethods__["y"] = _sdl1py.SDL_MouseButtonEvent_y_get
    if _newclass:y = _swig_property(_sdl1py.SDL_MouseButtonEvent_y_get, _sdl1py.SDL_MouseButtonEvent_y_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_MouseButtonEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_MouseButtonEvent
    __del__ = lambda self : None;
SDL_MouseButtonEvent_swigregister = _sdl1py.SDL_MouseButtonEvent_swigregister
SDL_MouseButtonEvent_swigregister(SDL_MouseButtonEvent)

class SDL_JoyAxisEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_JoyAxisEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_JoyAxisEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_JoyAxisEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_JoyAxisEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_JoyAxisEvent_type_get, _sdl1py.SDL_JoyAxisEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_JoyAxisEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_JoyAxisEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_JoyAxisEvent_which_get, _sdl1py.SDL_JoyAxisEvent_which_set)
    __swig_setmethods__["axis"] = _sdl1py.SDL_JoyAxisEvent_axis_set
    __swig_getmethods__["axis"] = _sdl1py.SDL_JoyAxisEvent_axis_get
    if _newclass:axis = _swig_property(_sdl1py.SDL_JoyAxisEvent_axis_get, _sdl1py.SDL_JoyAxisEvent_axis_set)
    __swig_setmethods__["value"] = _sdl1py.SDL_JoyAxisEvent_value_set
    __swig_getmethods__["value"] = _sdl1py.SDL_JoyAxisEvent_value_get
    if _newclass:value = _swig_property(_sdl1py.SDL_JoyAxisEvent_value_get, _sdl1py.SDL_JoyAxisEvent_value_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_JoyAxisEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_JoyAxisEvent
    __del__ = lambda self : None;
SDL_JoyAxisEvent_swigregister = _sdl1py.SDL_JoyAxisEvent_swigregister
SDL_JoyAxisEvent_swigregister(SDL_JoyAxisEvent)

class SDL_JoyBallEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_JoyBallEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_JoyBallEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_JoyBallEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_JoyBallEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_JoyBallEvent_type_get, _sdl1py.SDL_JoyBallEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_JoyBallEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_JoyBallEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_JoyBallEvent_which_get, _sdl1py.SDL_JoyBallEvent_which_set)
    __swig_setmethods__["ball"] = _sdl1py.SDL_JoyBallEvent_ball_set
    __swig_getmethods__["ball"] = _sdl1py.SDL_JoyBallEvent_ball_get
    if _newclass:ball = _swig_property(_sdl1py.SDL_JoyBallEvent_ball_get, _sdl1py.SDL_JoyBallEvent_ball_set)
    __swig_setmethods__["xrel"] = _sdl1py.SDL_JoyBallEvent_xrel_set
    __swig_getmethods__["xrel"] = _sdl1py.SDL_JoyBallEvent_xrel_get
    if _newclass:xrel = _swig_property(_sdl1py.SDL_JoyBallEvent_xrel_get, _sdl1py.SDL_JoyBallEvent_xrel_set)
    __swig_setmethods__["yrel"] = _sdl1py.SDL_JoyBallEvent_yrel_set
    __swig_getmethods__["yrel"] = _sdl1py.SDL_JoyBallEvent_yrel_get
    if _newclass:yrel = _swig_property(_sdl1py.SDL_JoyBallEvent_yrel_get, _sdl1py.SDL_JoyBallEvent_yrel_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_JoyBallEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_JoyBallEvent
    __del__ = lambda self : None;
SDL_JoyBallEvent_swigregister = _sdl1py.SDL_JoyBallEvent_swigregister
SDL_JoyBallEvent_swigregister(SDL_JoyBallEvent)

class SDL_JoyHatEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_JoyHatEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_JoyHatEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_JoyHatEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_JoyHatEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_JoyHatEvent_type_get, _sdl1py.SDL_JoyHatEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_JoyHatEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_JoyHatEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_JoyHatEvent_which_get, _sdl1py.SDL_JoyHatEvent_which_set)
    __swig_setmethods__["hat"] = _sdl1py.SDL_JoyHatEvent_hat_set
    __swig_getmethods__["hat"] = _sdl1py.SDL_JoyHatEvent_hat_get
    if _newclass:hat = _swig_property(_sdl1py.SDL_JoyHatEvent_hat_get, _sdl1py.SDL_JoyHatEvent_hat_set)
    __swig_setmethods__["value"] = _sdl1py.SDL_JoyHatEvent_value_set
    __swig_getmethods__["value"] = _sdl1py.SDL_JoyHatEvent_value_get
    if _newclass:value = _swig_property(_sdl1py.SDL_JoyHatEvent_value_get, _sdl1py.SDL_JoyHatEvent_value_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_JoyHatEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_JoyHatEvent
    __del__ = lambda self : None;
SDL_JoyHatEvent_swigregister = _sdl1py.SDL_JoyHatEvent_swigregister
SDL_JoyHatEvent_swigregister(SDL_JoyHatEvent)

class SDL_JoyButtonEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_JoyButtonEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_JoyButtonEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_JoyButtonEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_JoyButtonEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_JoyButtonEvent_type_get, _sdl1py.SDL_JoyButtonEvent_type_set)
    __swig_setmethods__["which"] = _sdl1py.SDL_JoyButtonEvent_which_set
    __swig_getmethods__["which"] = _sdl1py.SDL_JoyButtonEvent_which_get
    if _newclass:which = _swig_property(_sdl1py.SDL_JoyButtonEvent_which_get, _sdl1py.SDL_JoyButtonEvent_which_set)
    __swig_setmethods__["button"] = _sdl1py.SDL_JoyButtonEvent_button_set
    __swig_getmethods__["button"] = _sdl1py.SDL_JoyButtonEvent_button_get
    if _newclass:button = _swig_property(_sdl1py.SDL_JoyButtonEvent_button_get, _sdl1py.SDL_JoyButtonEvent_button_set)
    __swig_setmethods__["state"] = _sdl1py.SDL_JoyButtonEvent_state_set
    __swig_getmethods__["state"] = _sdl1py.SDL_JoyButtonEvent_state_get
    if _newclass:state = _swig_property(_sdl1py.SDL_JoyButtonEvent_state_get, _sdl1py.SDL_JoyButtonEvent_state_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_JoyButtonEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_JoyButtonEvent
    __del__ = lambda self : None;
SDL_JoyButtonEvent_swigregister = _sdl1py.SDL_JoyButtonEvent_swigregister
SDL_JoyButtonEvent_swigregister(SDL_JoyButtonEvent)

class SDL_ResizeEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_ResizeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_ResizeEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_ResizeEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_ResizeEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_ResizeEvent_type_get, _sdl1py.SDL_ResizeEvent_type_set)
    __swig_setmethods__["w"] = _sdl1py.SDL_ResizeEvent_w_set
    __swig_getmethods__["w"] = _sdl1py.SDL_ResizeEvent_w_get
    if _newclass:w = _swig_property(_sdl1py.SDL_ResizeEvent_w_get, _sdl1py.SDL_ResizeEvent_w_set)
    __swig_setmethods__["h"] = _sdl1py.SDL_ResizeEvent_h_set
    __swig_getmethods__["h"] = _sdl1py.SDL_ResizeEvent_h_get
    if _newclass:h = _swig_property(_sdl1py.SDL_ResizeEvent_h_get, _sdl1py.SDL_ResizeEvent_h_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_ResizeEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_ResizeEvent
    __del__ = lambda self : None;
SDL_ResizeEvent_swigregister = _sdl1py.SDL_ResizeEvent_swigregister
SDL_ResizeEvent_swigregister(SDL_ResizeEvent)

class SDL_ExposeEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_ExposeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_ExposeEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_ExposeEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_ExposeEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_ExposeEvent_type_get, _sdl1py.SDL_ExposeEvent_type_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_ExposeEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_ExposeEvent
    __del__ = lambda self : None;
SDL_ExposeEvent_swigregister = _sdl1py.SDL_ExposeEvent_swigregister
SDL_ExposeEvent_swigregister(SDL_ExposeEvent)

class SDL_QuitEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_QuitEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_QuitEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_QuitEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_QuitEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_QuitEvent_type_get, _sdl1py.SDL_QuitEvent_type_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_QuitEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_QuitEvent
    __del__ = lambda self : None;
SDL_QuitEvent_swigregister = _sdl1py.SDL_QuitEvent_swigregister
SDL_QuitEvent_swigregister(SDL_QuitEvent)

class SDL_UserEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_UserEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_UserEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_UserEvent_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_UserEvent_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_UserEvent_type_get, _sdl1py.SDL_UserEvent_type_set)
    __swig_setmethods__["code"] = _sdl1py.SDL_UserEvent_code_set
    __swig_getmethods__["code"] = _sdl1py.SDL_UserEvent_code_get
    if _newclass:code = _swig_property(_sdl1py.SDL_UserEvent_code_get, _sdl1py.SDL_UserEvent_code_set)
    __swig_setmethods__["data1"] = _sdl1py.SDL_UserEvent_data1_set
    __swig_getmethods__["data1"] = _sdl1py.SDL_UserEvent_data1_get
    if _newclass:data1 = _swig_property(_sdl1py.SDL_UserEvent_data1_get, _sdl1py.SDL_UserEvent_data1_set)
    __swig_setmethods__["data2"] = _sdl1py.SDL_UserEvent_data2_set
    __swig_getmethods__["data2"] = _sdl1py.SDL_UserEvent_data2_get
    if _newclass:data2 = _swig_property(_sdl1py.SDL_UserEvent_data2_get, _sdl1py.SDL_UserEvent_data2_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_UserEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_UserEvent
    __del__ = lambda self : None;
SDL_UserEvent_swigregister = _sdl1py.SDL_UserEvent_swigregister
SDL_UserEvent_swigregister(SDL_UserEvent)

class SDL_Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sdl1py.SDL_Event_type_set
    __swig_getmethods__["type"] = _sdl1py.SDL_Event_type_get
    if _newclass:type = _swig_property(_sdl1py.SDL_Event_type_get, _sdl1py.SDL_Event_type_set)
    __swig_setmethods__["active"] = _sdl1py.SDL_Event_active_set
    __swig_getmethods__["active"] = _sdl1py.SDL_Event_active_get
    if _newclass:active = _swig_property(_sdl1py.SDL_Event_active_get, _sdl1py.SDL_Event_active_set)
    __swig_setmethods__["key"] = _sdl1py.SDL_Event_key_set
    __swig_getmethods__["key"] = _sdl1py.SDL_Event_key_get
    if _newclass:key = _swig_property(_sdl1py.SDL_Event_key_get, _sdl1py.SDL_Event_key_set)
    __swig_setmethods__["motion"] = _sdl1py.SDL_Event_motion_set
    __swig_getmethods__["motion"] = _sdl1py.SDL_Event_motion_get
    if _newclass:motion = _swig_property(_sdl1py.SDL_Event_motion_get, _sdl1py.SDL_Event_motion_set)
    __swig_setmethods__["button"] = _sdl1py.SDL_Event_button_set
    __swig_getmethods__["button"] = _sdl1py.SDL_Event_button_get
    if _newclass:button = _swig_property(_sdl1py.SDL_Event_button_get, _sdl1py.SDL_Event_button_set)
    __swig_setmethods__["jaxis"] = _sdl1py.SDL_Event_jaxis_set
    __swig_getmethods__["jaxis"] = _sdl1py.SDL_Event_jaxis_get
    if _newclass:jaxis = _swig_property(_sdl1py.SDL_Event_jaxis_get, _sdl1py.SDL_Event_jaxis_set)
    __swig_setmethods__["jball"] = _sdl1py.SDL_Event_jball_set
    __swig_getmethods__["jball"] = _sdl1py.SDL_Event_jball_get
    if _newclass:jball = _swig_property(_sdl1py.SDL_Event_jball_get, _sdl1py.SDL_Event_jball_set)
    __swig_setmethods__["jhat"] = _sdl1py.SDL_Event_jhat_set
    __swig_getmethods__["jhat"] = _sdl1py.SDL_Event_jhat_get
    if _newclass:jhat = _swig_property(_sdl1py.SDL_Event_jhat_get, _sdl1py.SDL_Event_jhat_set)
    __swig_setmethods__["jbutton"] = _sdl1py.SDL_Event_jbutton_set
    __swig_getmethods__["jbutton"] = _sdl1py.SDL_Event_jbutton_get
    if _newclass:jbutton = _swig_property(_sdl1py.SDL_Event_jbutton_get, _sdl1py.SDL_Event_jbutton_set)
    __swig_setmethods__["resize"] = _sdl1py.SDL_Event_resize_set
    __swig_getmethods__["resize"] = _sdl1py.SDL_Event_resize_get
    if _newclass:resize = _swig_property(_sdl1py.SDL_Event_resize_get, _sdl1py.SDL_Event_resize_set)
    __swig_setmethods__["expose"] = _sdl1py.SDL_Event_expose_set
    __swig_getmethods__["expose"] = _sdl1py.SDL_Event_expose_get
    if _newclass:expose = _swig_property(_sdl1py.SDL_Event_expose_get, _sdl1py.SDL_Event_expose_set)
    __swig_setmethods__["quit"] = _sdl1py.SDL_Event_quit_set
    __swig_getmethods__["quit"] = _sdl1py.SDL_Event_quit_get
    if _newclass:quit = _swig_property(_sdl1py.SDL_Event_quit_get, _sdl1py.SDL_Event_quit_set)
    __swig_setmethods__["user"] = _sdl1py.SDL_Event_user_set
    __swig_getmethods__["user"] = _sdl1py.SDL_Event_user_get
    if _newclass:user = _swig_property(_sdl1py.SDL_Event_user_get, _sdl1py.SDL_Event_user_set)
    __swig_setmethods__["syswm"] = _sdl1py.SDL_Event_syswm_set
    __swig_getmethods__["syswm"] = _sdl1py.SDL_Event_syswm_get
    if _newclass:syswm = _swig_property(_sdl1py.SDL_Event_syswm_get, _sdl1py.SDL_Event_syswm_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_Event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_Event
    __del__ = lambda self : None;
SDL_Event_swigregister = _sdl1py.SDL_Event_swigregister
SDL_Event_swigregister(SDL_Event)


def SDL_PumpEvents() -> "void" :
  return _sdl1py.SDL_PumpEvents()
SDL_PumpEvents = _sdl1py.SDL_PumpEvents
SDL_ADDEVENT = _sdl1py.SDL_ADDEVENT
SDL_PEEKEVENT = _sdl1py.SDL_PEEKEVENT
SDL_GETEVENT = _sdl1py.SDL_GETEVENT

def SDL_PeepEvents(*args) -> "int" :
  return _sdl1py.SDL_PeepEvents(*args)
SDL_PeepEvents = _sdl1py.SDL_PeepEvents

def SDL_PollEvent(*args) -> "int" :
  return _sdl1py.SDL_PollEvent(*args)
SDL_PollEvent = _sdl1py.SDL_PollEvent

def SDL_WaitEvent(*args) -> "int" :
  return _sdl1py.SDL_WaitEvent(*args)
SDL_WaitEvent = _sdl1py.SDL_WaitEvent

def SDL_PushEvent(*args) -> "int" :
  return _sdl1py.SDL_PushEvent(*args)
SDL_PushEvent = _sdl1py.SDL_PushEvent
SDL_QUERY = _sdl1py.SDL_QUERY
SDL_IGNORE = _sdl1py.SDL_IGNORE
SDL_DISABLE = _sdl1py.SDL_DISABLE
SDL_ENABLE = _sdl1py.SDL_ENABLE

def SDL_EventState(*args) -> "Uint8" :
  return _sdl1py.SDL_EventState(*args)
SDL_EventState = _sdl1py.SDL_EventState

def SDL_QuitRequested() -> "int" :
  return _sdl1py.SDL_QuitRequested()
SDL_QuitRequested = _sdl1py.SDL_QuitRequested
SDLK_UNKNOWN = _sdl1py.SDLK_UNKNOWN
SDLK_FIRST = _sdl1py.SDLK_FIRST
SDLK_BACKSPACE = _sdl1py.SDLK_BACKSPACE
SDLK_TAB = _sdl1py.SDLK_TAB
SDLK_CLEAR = _sdl1py.SDLK_CLEAR
SDLK_RETURN = _sdl1py.SDLK_RETURN
SDLK_PAUSE = _sdl1py.SDLK_PAUSE
SDLK_ESCAPE = _sdl1py.SDLK_ESCAPE
SDLK_SPACE = _sdl1py.SDLK_SPACE
SDLK_EXCLAIM = _sdl1py.SDLK_EXCLAIM
SDLK_QUOTEDBL = _sdl1py.SDLK_QUOTEDBL
SDLK_HASH = _sdl1py.SDLK_HASH
SDLK_DOLLAR = _sdl1py.SDLK_DOLLAR
SDLK_AMPERSAND = _sdl1py.SDLK_AMPERSAND
SDLK_QUOTE = _sdl1py.SDLK_QUOTE
SDLK_LEFTPAREN = _sdl1py.SDLK_LEFTPAREN
SDLK_RIGHTPAREN = _sdl1py.SDLK_RIGHTPAREN
SDLK_ASTERISK = _sdl1py.SDLK_ASTERISK
SDLK_PLUS = _sdl1py.SDLK_PLUS
SDLK_COMMA = _sdl1py.SDLK_COMMA
SDLK_MINUS = _sdl1py.SDLK_MINUS
SDLK_PERIOD = _sdl1py.SDLK_PERIOD
SDLK_SLASH = _sdl1py.SDLK_SLASH
SDLK_0 = _sdl1py.SDLK_0
SDLK_1 = _sdl1py.SDLK_1
SDLK_2 = _sdl1py.SDLK_2
SDLK_3 = _sdl1py.SDLK_3
SDLK_4 = _sdl1py.SDLK_4
SDLK_5 = _sdl1py.SDLK_5
SDLK_6 = _sdl1py.SDLK_6
SDLK_7 = _sdl1py.SDLK_7
SDLK_8 = _sdl1py.SDLK_8
SDLK_9 = _sdl1py.SDLK_9
SDLK_COLON = _sdl1py.SDLK_COLON
SDLK_SEMICOLON = _sdl1py.SDLK_SEMICOLON
SDLK_LESS = _sdl1py.SDLK_LESS
SDLK_EQUALS = _sdl1py.SDLK_EQUALS
SDLK_GREATER = _sdl1py.SDLK_GREATER
SDLK_QUESTION = _sdl1py.SDLK_QUESTION
SDLK_AT = _sdl1py.SDLK_AT
SDLK_LEFTBRACKET = _sdl1py.SDLK_LEFTBRACKET
SDLK_BACKSLASH = _sdl1py.SDLK_BACKSLASH
SDLK_RIGHTBRACKET = _sdl1py.SDLK_RIGHTBRACKET
SDLK_CARET = _sdl1py.SDLK_CARET
SDLK_UNDERSCORE = _sdl1py.SDLK_UNDERSCORE
SDLK_BACKQUOTE = _sdl1py.SDLK_BACKQUOTE
SDLK_a = _sdl1py.SDLK_a
SDLK_b = _sdl1py.SDLK_b
SDLK_c = _sdl1py.SDLK_c
SDLK_d = _sdl1py.SDLK_d
SDLK_e = _sdl1py.SDLK_e
SDLK_f = _sdl1py.SDLK_f
SDLK_g = _sdl1py.SDLK_g
SDLK_h = _sdl1py.SDLK_h
SDLK_i = _sdl1py.SDLK_i
SDLK_j = _sdl1py.SDLK_j
SDLK_k = _sdl1py.SDLK_k
SDLK_l = _sdl1py.SDLK_l
SDLK_m = _sdl1py.SDLK_m
SDLK_n = _sdl1py.SDLK_n
SDLK_o = _sdl1py.SDLK_o
SDLK_p = _sdl1py.SDLK_p
SDLK_q = _sdl1py.SDLK_q
SDLK_r = _sdl1py.SDLK_r
SDLK_s = _sdl1py.SDLK_s
SDLK_t = _sdl1py.SDLK_t
SDLK_u = _sdl1py.SDLK_u
SDLK_v = _sdl1py.SDLK_v
SDLK_w = _sdl1py.SDLK_w
SDLK_x = _sdl1py.SDLK_x
SDLK_y = _sdl1py.SDLK_y
SDLK_z = _sdl1py.SDLK_z
SDLK_DELETE = _sdl1py.SDLK_DELETE
SDLK_WORLD_0 = _sdl1py.SDLK_WORLD_0
SDLK_WORLD_1 = _sdl1py.SDLK_WORLD_1
SDLK_WORLD_2 = _sdl1py.SDLK_WORLD_2
SDLK_WORLD_3 = _sdl1py.SDLK_WORLD_3
SDLK_WORLD_4 = _sdl1py.SDLK_WORLD_4
SDLK_WORLD_5 = _sdl1py.SDLK_WORLD_5
SDLK_WORLD_6 = _sdl1py.SDLK_WORLD_6
SDLK_WORLD_7 = _sdl1py.SDLK_WORLD_7
SDLK_WORLD_8 = _sdl1py.SDLK_WORLD_8
SDLK_WORLD_9 = _sdl1py.SDLK_WORLD_9
SDLK_WORLD_10 = _sdl1py.SDLK_WORLD_10
SDLK_WORLD_11 = _sdl1py.SDLK_WORLD_11
SDLK_WORLD_12 = _sdl1py.SDLK_WORLD_12
SDLK_WORLD_13 = _sdl1py.SDLK_WORLD_13
SDLK_WORLD_14 = _sdl1py.SDLK_WORLD_14
SDLK_WORLD_15 = _sdl1py.SDLK_WORLD_15
SDLK_WORLD_16 = _sdl1py.SDLK_WORLD_16
SDLK_WORLD_17 = _sdl1py.SDLK_WORLD_17
SDLK_WORLD_18 = _sdl1py.SDLK_WORLD_18
SDLK_WORLD_19 = _sdl1py.SDLK_WORLD_19
SDLK_WORLD_20 = _sdl1py.SDLK_WORLD_20
SDLK_WORLD_21 = _sdl1py.SDLK_WORLD_21
SDLK_WORLD_22 = _sdl1py.SDLK_WORLD_22
SDLK_WORLD_23 = _sdl1py.SDLK_WORLD_23
SDLK_WORLD_24 = _sdl1py.SDLK_WORLD_24
SDLK_WORLD_25 = _sdl1py.SDLK_WORLD_25
SDLK_WORLD_26 = _sdl1py.SDLK_WORLD_26
SDLK_WORLD_27 = _sdl1py.SDLK_WORLD_27
SDLK_WORLD_28 = _sdl1py.SDLK_WORLD_28
SDLK_WORLD_29 = _sdl1py.SDLK_WORLD_29
SDLK_WORLD_30 = _sdl1py.SDLK_WORLD_30
SDLK_WORLD_31 = _sdl1py.SDLK_WORLD_31
SDLK_WORLD_32 = _sdl1py.SDLK_WORLD_32
SDLK_WORLD_33 = _sdl1py.SDLK_WORLD_33
SDLK_WORLD_34 = _sdl1py.SDLK_WORLD_34
SDLK_WORLD_35 = _sdl1py.SDLK_WORLD_35
SDLK_WORLD_36 = _sdl1py.SDLK_WORLD_36
SDLK_WORLD_37 = _sdl1py.SDLK_WORLD_37
SDLK_WORLD_38 = _sdl1py.SDLK_WORLD_38
SDLK_WORLD_39 = _sdl1py.SDLK_WORLD_39
SDLK_WORLD_40 = _sdl1py.SDLK_WORLD_40
SDLK_WORLD_41 = _sdl1py.SDLK_WORLD_41
SDLK_WORLD_42 = _sdl1py.SDLK_WORLD_42
SDLK_WORLD_43 = _sdl1py.SDLK_WORLD_43
SDLK_WORLD_44 = _sdl1py.SDLK_WORLD_44
SDLK_WORLD_45 = _sdl1py.SDLK_WORLD_45
SDLK_WORLD_46 = _sdl1py.SDLK_WORLD_46
SDLK_WORLD_47 = _sdl1py.SDLK_WORLD_47
SDLK_WORLD_48 = _sdl1py.SDLK_WORLD_48
SDLK_WORLD_49 = _sdl1py.SDLK_WORLD_49
SDLK_WORLD_50 = _sdl1py.SDLK_WORLD_50
SDLK_WORLD_51 = _sdl1py.SDLK_WORLD_51
SDLK_WORLD_52 = _sdl1py.SDLK_WORLD_52
SDLK_WORLD_53 = _sdl1py.SDLK_WORLD_53
SDLK_WORLD_54 = _sdl1py.SDLK_WORLD_54
SDLK_WORLD_55 = _sdl1py.SDLK_WORLD_55
SDLK_WORLD_56 = _sdl1py.SDLK_WORLD_56
SDLK_WORLD_57 = _sdl1py.SDLK_WORLD_57
SDLK_WORLD_58 = _sdl1py.SDLK_WORLD_58
SDLK_WORLD_59 = _sdl1py.SDLK_WORLD_59
SDLK_WORLD_60 = _sdl1py.SDLK_WORLD_60
SDLK_WORLD_61 = _sdl1py.SDLK_WORLD_61
SDLK_WORLD_62 = _sdl1py.SDLK_WORLD_62
SDLK_WORLD_63 = _sdl1py.SDLK_WORLD_63
SDLK_WORLD_64 = _sdl1py.SDLK_WORLD_64
SDLK_WORLD_65 = _sdl1py.SDLK_WORLD_65
SDLK_WORLD_66 = _sdl1py.SDLK_WORLD_66
SDLK_WORLD_67 = _sdl1py.SDLK_WORLD_67
SDLK_WORLD_68 = _sdl1py.SDLK_WORLD_68
SDLK_WORLD_69 = _sdl1py.SDLK_WORLD_69
SDLK_WORLD_70 = _sdl1py.SDLK_WORLD_70
SDLK_WORLD_71 = _sdl1py.SDLK_WORLD_71
SDLK_WORLD_72 = _sdl1py.SDLK_WORLD_72
SDLK_WORLD_73 = _sdl1py.SDLK_WORLD_73
SDLK_WORLD_74 = _sdl1py.SDLK_WORLD_74
SDLK_WORLD_75 = _sdl1py.SDLK_WORLD_75
SDLK_WORLD_76 = _sdl1py.SDLK_WORLD_76
SDLK_WORLD_77 = _sdl1py.SDLK_WORLD_77
SDLK_WORLD_78 = _sdl1py.SDLK_WORLD_78
SDLK_WORLD_79 = _sdl1py.SDLK_WORLD_79
SDLK_WORLD_80 = _sdl1py.SDLK_WORLD_80
SDLK_WORLD_81 = _sdl1py.SDLK_WORLD_81
SDLK_WORLD_82 = _sdl1py.SDLK_WORLD_82
SDLK_WORLD_83 = _sdl1py.SDLK_WORLD_83
SDLK_WORLD_84 = _sdl1py.SDLK_WORLD_84
SDLK_WORLD_85 = _sdl1py.SDLK_WORLD_85
SDLK_WORLD_86 = _sdl1py.SDLK_WORLD_86
SDLK_WORLD_87 = _sdl1py.SDLK_WORLD_87
SDLK_WORLD_88 = _sdl1py.SDLK_WORLD_88
SDLK_WORLD_89 = _sdl1py.SDLK_WORLD_89
SDLK_WORLD_90 = _sdl1py.SDLK_WORLD_90
SDLK_WORLD_91 = _sdl1py.SDLK_WORLD_91
SDLK_WORLD_92 = _sdl1py.SDLK_WORLD_92
SDLK_WORLD_93 = _sdl1py.SDLK_WORLD_93
SDLK_WORLD_94 = _sdl1py.SDLK_WORLD_94
SDLK_WORLD_95 = _sdl1py.SDLK_WORLD_95
SDLK_KP0 = _sdl1py.SDLK_KP0
SDLK_KP1 = _sdl1py.SDLK_KP1
SDLK_KP2 = _sdl1py.SDLK_KP2
SDLK_KP3 = _sdl1py.SDLK_KP3
SDLK_KP4 = _sdl1py.SDLK_KP4
SDLK_KP5 = _sdl1py.SDLK_KP5
SDLK_KP6 = _sdl1py.SDLK_KP6
SDLK_KP7 = _sdl1py.SDLK_KP7
SDLK_KP8 = _sdl1py.SDLK_KP8
SDLK_KP9 = _sdl1py.SDLK_KP9
SDLK_KP_PERIOD = _sdl1py.SDLK_KP_PERIOD
SDLK_KP_DIVIDE = _sdl1py.SDLK_KP_DIVIDE
SDLK_KP_MULTIPLY = _sdl1py.SDLK_KP_MULTIPLY
SDLK_KP_MINUS = _sdl1py.SDLK_KP_MINUS
SDLK_KP_PLUS = _sdl1py.SDLK_KP_PLUS
SDLK_KP_ENTER = _sdl1py.SDLK_KP_ENTER
SDLK_KP_EQUALS = _sdl1py.SDLK_KP_EQUALS
SDLK_UP = _sdl1py.SDLK_UP
SDLK_DOWN = _sdl1py.SDLK_DOWN
SDLK_RIGHT = _sdl1py.SDLK_RIGHT
SDLK_LEFT = _sdl1py.SDLK_LEFT
SDLK_INSERT = _sdl1py.SDLK_INSERT
SDLK_HOME = _sdl1py.SDLK_HOME
SDLK_END = _sdl1py.SDLK_END
SDLK_PAGEUP = _sdl1py.SDLK_PAGEUP
SDLK_PAGEDOWN = _sdl1py.SDLK_PAGEDOWN
SDLK_F1 = _sdl1py.SDLK_F1
SDLK_F2 = _sdl1py.SDLK_F2
SDLK_F3 = _sdl1py.SDLK_F3
SDLK_F4 = _sdl1py.SDLK_F4
SDLK_F5 = _sdl1py.SDLK_F5
SDLK_F6 = _sdl1py.SDLK_F6
SDLK_F7 = _sdl1py.SDLK_F7
SDLK_F8 = _sdl1py.SDLK_F8
SDLK_F9 = _sdl1py.SDLK_F9
SDLK_F10 = _sdl1py.SDLK_F10
SDLK_F11 = _sdl1py.SDLK_F11
SDLK_F12 = _sdl1py.SDLK_F12
SDLK_F13 = _sdl1py.SDLK_F13
SDLK_F14 = _sdl1py.SDLK_F14
SDLK_F15 = _sdl1py.SDLK_F15
SDLK_NUMLOCK = _sdl1py.SDLK_NUMLOCK
SDLK_CAPSLOCK = _sdl1py.SDLK_CAPSLOCK
SDLK_SCROLLOCK = _sdl1py.SDLK_SCROLLOCK
SDLK_RSHIFT = _sdl1py.SDLK_RSHIFT
SDLK_LSHIFT = _sdl1py.SDLK_LSHIFT
SDLK_RCTRL = _sdl1py.SDLK_RCTRL
SDLK_LCTRL = _sdl1py.SDLK_LCTRL
SDLK_RALT = _sdl1py.SDLK_RALT
SDLK_LALT = _sdl1py.SDLK_LALT
SDLK_RMETA = _sdl1py.SDLK_RMETA
SDLK_LMETA = _sdl1py.SDLK_LMETA
SDLK_LSUPER = _sdl1py.SDLK_LSUPER
SDLK_RSUPER = _sdl1py.SDLK_RSUPER
SDLK_MODE = _sdl1py.SDLK_MODE
SDLK_COMPOSE = _sdl1py.SDLK_COMPOSE
SDLK_HELP = _sdl1py.SDLK_HELP
SDLK_PRINT = _sdl1py.SDLK_PRINT
SDLK_SYSREQ = _sdl1py.SDLK_SYSREQ
SDLK_BREAK = _sdl1py.SDLK_BREAK
SDLK_MENU = _sdl1py.SDLK_MENU
SDLK_POWER = _sdl1py.SDLK_POWER
SDLK_EURO = _sdl1py.SDLK_EURO
SDLK_UNDO = _sdl1py.SDLK_UNDO
SDLK_LAST = _sdl1py.SDLK_LAST
KMOD_NONE = _sdl1py.KMOD_NONE
KMOD_LSHIFT = _sdl1py.KMOD_LSHIFT
KMOD_RSHIFT = _sdl1py.KMOD_RSHIFT
KMOD_LCTRL = _sdl1py.KMOD_LCTRL
KMOD_RCTRL = _sdl1py.KMOD_RCTRL
KMOD_LALT = _sdl1py.KMOD_LALT
KMOD_RALT = _sdl1py.KMOD_RALT
KMOD_LMETA = _sdl1py.KMOD_LMETA
KMOD_RMETA = _sdl1py.KMOD_RMETA
KMOD_NUM = _sdl1py.KMOD_NUM
KMOD_CAPS = _sdl1py.KMOD_CAPS
KMOD_MODE = _sdl1py.KMOD_MODE
KMOD_RESERVED = _sdl1py.KMOD_RESERVED
KMOD_CTRL = _sdl1py.KMOD_CTRL
KMOD_SHIFT = _sdl1py.KMOD_SHIFT
KMOD_ALT = _sdl1py.KMOD_ALT
KMOD_META = _sdl1py.KMOD_META
class SDL_keysym(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_keysym, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_keysym, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scancode"] = _sdl1py.SDL_keysym_scancode_set
    __swig_getmethods__["scancode"] = _sdl1py.SDL_keysym_scancode_get
    if _newclass:scancode = _swig_property(_sdl1py.SDL_keysym_scancode_get, _sdl1py.SDL_keysym_scancode_set)
    __swig_setmethods__["sym"] = _sdl1py.SDL_keysym_sym_set
    __swig_getmethods__["sym"] = _sdl1py.SDL_keysym_sym_get
    if _newclass:sym = _swig_property(_sdl1py.SDL_keysym_sym_get, _sdl1py.SDL_keysym_sym_set)
    __swig_setmethods__["mod"] = _sdl1py.SDL_keysym_mod_set
    __swig_getmethods__["mod"] = _sdl1py.SDL_keysym_mod_get
    if _newclass:mod = _swig_property(_sdl1py.SDL_keysym_mod_get, _sdl1py.SDL_keysym_mod_set)
    __swig_setmethods__["unicode"] = _sdl1py.SDL_keysym_unicode_set
    __swig_getmethods__["unicode"] = _sdl1py.SDL_keysym_unicode_get
    if _newclass:unicode = _swig_property(_sdl1py.SDL_keysym_unicode_get, _sdl1py.SDL_keysym_unicode_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_keysym()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_keysym
    __del__ = lambda self : None;
SDL_keysym_swigregister = _sdl1py.SDL_keysym_swigregister
SDL_keysym_swigregister(SDL_keysym)

SDL_ALL_HOTKEYS = _sdl1py.SDL_ALL_HOTKEYS

def SDL_EnableUNICODE(*args) -> "int" :
  return _sdl1py.SDL_EnableUNICODE(*args)
SDL_EnableUNICODE = _sdl1py.SDL_EnableUNICODE
SDL_DEFAULT_REPEAT_DELAY = _sdl1py.SDL_DEFAULT_REPEAT_DELAY
SDL_DEFAULT_REPEAT_INTERVAL = _sdl1py.SDL_DEFAULT_REPEAT_INTERVAL

def SDL_EnableKeyRepeat(*args) -> "int" :
  return _sdl1py.SDL_EnableKeyRepeat(*args)
SDL_EnableKeyRepeat = _sdl1py.SDL_EnableKeyRepeat

def SDL_GetKeyRepeat(*args) -> "void" :
  return _sdl1py.SDL_GetKeyRepeat(*args)
SDL_GetKeyRepeat = _sdl1py.SDL_GetKeyRepeat

def SDL_GetKeyState(*args) -> "Uint8 *" :
  return _sdl1py.SDL_GetKeyState(*args)
SDL_GetKeyState = _sdl1py.SDL_GetKeyState

def SDL_GetModState() -> "SDLMod" :
  return _sdl1py.SDL_GetModState()
SDL_GetModState = _sdl1py.SDL_GetModState

def SDL_SetModState(*args) -> "void" :
  return _sdl1py.SDL_SetModState(*args)
SDL_SetModState = _sdl1py.SDL_SetModState

def SDL_GetKeyName(*args) -> "char *" :
  return _sdl1py.SDL_GetKeyName(*args)
SDL_GetKeyName = _sdl1py.SDL_GetKeyName
class SDL_Cursor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Cursor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Cursor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["area"] = _sdl1py.SDL_Cursor_area_set
    __swig_getmethods__["area"] = _sdl1py.SDL_Cursor_area_get
    if _newclass:area = _swig_property(_sdl1py.SDL_Cursor_area_get, _sdl1py.SDL_Cursor_area_set)
    __swig_setmethods__["hot_x"] = _sdl1py.SDL_Cursor_hot_x_set
    __swig_getmethods__["hot_x"] = _sdl1py.SDL_Cursor_hot_x_get
    if _newclass:hot_x = _swig_property(_sdl1py.SDL_Cursor_hot_x_get, _sdl1py.SDL_Cursor_hot_x_set)
    __swig_setmethods__["hot_y"] = _sdl1py.SDL_Cursor_hot_y_set
    __swig_getmethods__["hot_y"] = _sdl1py.SDL_Cursor_hot_y_get
    if _newclass:hot_y = _swig_property(_sdl1py.SDL_Cursor_hot_y_get, _sdl1py.SDL_Cursor_hot_y_set)
    __swig_setmethods__["data"] = _sdl1py.SDL_Cursor_data_set
    __swig_getmethods__["data"] = _sdl1py.SDL_Cursor_data_get
    if _newclass:data = _swig_property(_sdl1py.SDL_Cursor_data_get, _sdl1py.SDL_Cursor_data_set)
    __swig_setmethods__["mask"] = _sdl1py.SDL_Cursor_mask_set
    __swig_getmethods__["mask"] = _sdl1py.SDL_Cursor_mask_get
    if _newclass:mask = _swig_property(_sdl1py.SDL_Cursor_mask_get, _sdl1py.SDL_Cursor_mask_set)
    __swig_setmethods__["save"] = _sdl1py.SDL_Cursor_save_set
    __swig_getmethods__["save"] = _sdl1py.SDL_Cursor_save_get
    if _newclass:save = _swig_property(_sdl1py.SDL_Cursor_save_get, _sdl1py.SDL_Cursor_save_set)
    __swig_setmethods__["wm_cursor"] = _sdl1py.SDL_Cursor_wm_cursor_set
    __swig_getmethods__["wm_cursor"] = _sdl1py.SDL_Cursor_wm_cursor_get
    if _newclass:wm_cursor = _swig_property(_sdl1py.SDL_Cursor_wm_cursor_get, _sdl1py.SDL_Cursor_wm_cursor_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_Cursor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_Cursor
    __del__ = lambda self : None;
SDL_Cursor_swigregister = _sdl1py.SDL_Cursor_swigregister
SDL_Cursor_swigregister(SDL_Cursor)


def SDL_GetMouseState() -> "int *, int *" :
  return _sdl1py.SDL_GetMouseState()
SDL_GetMouseState = _sdl1py.SDL_GetMouseState

def SDL_GetRelativeMouseState() -> "int *, int *" :
  return _sdl1py.SDL_GetRelativeMouseState()
SDL_GetRelativeMouseState = _sdl1py.SDL_GetRelativeMouseState

def SDL_WarpMouse(*args) -> "void" :
  return _sdl1py.SDL_WarpMouse(*args)
SDL_WarpMouse = _sdl1py.SDL_WarpMouse

def SDL_CreateCursor(*args) -> "SDL_Cursor *" :
  return _sdl1py.SDL_CreateCursor(*args)
SDL_CreateCursor = _sdl1py.SDL_CreateCursor

def SDL_SetCursor(*args) -> "void" :
  return _sdl1py.SDL_SetCursor(*args)
SDL_SetCursor = _sdl1py.SDL_SetCursor

def SDL_GetCursor() -> "SDL_Cursor *" :
  return _sdl1py.SDL_GetCursor()
SDL_GetCursor = _sdl1py.SDL_GetCursor

def SDL_FreeCursor(*args) -> "void" :
  return _sdl1py.SDL_FreeCursor(*args)
SDL_FreeCursor = _sdl1py.SDL_FreeCursor

def SDL_ShowCursor(*args) -> "int" :
  return _sdl1py.SDL_ShowCursor(*args)
SDL_ShowCursor = _sdl1py.SDL_ShowCursor
SDL_BUTTON_LEFT = _sdl1py.SDL_BUTTON_LEFT
SDL_BUTTON_MIDDLE = _sdl1py.SDL_BUTTON_MIDDLE
SDL_BUTTON_RIGHT = _sdl1py.SDL_BUTTON_RIGHT
SDL_BUTTON_WHEELUP = _sdl1py.SDL_BUTTON_WHEELUP
SDL_BUTTON_WHEELDOWN = _sdl1py.SDL_BUTTON_WHEELDOWN
SDL_BUTTON_X1 = _sdl1py.SDL_BUTTON_X1
SDL_BUTTON_X2 = _sdl1py.SDL_BUTTON_X2

def SDL_BUTTON(*args) -> "int" :
  return _sdl1py.SDL_BUTTON(*args)
SDL_BUTTON = _sdl1py.SDL_BUTTON
SDL_BUTTON_LMASK = _sdl1py.SDL_BUTTON_LMASK
SDL_BUTTON_MMASK = _sdl1py.SDL_BUTTON_MMASK
SDL_BUTTON_RMASK = _sdl1py.SDL_BUTTON_RMASK
SDL_BUTTON_X1MASK = _sdl1py.SDL_BUTTON_X1MASK
SDL_BUTTON_X2MASK = _sdl1py.SDL_BUTTON_X2MASK

def SDL_JoystickGetBall(*args) -> "int *, int *" :
  return _sdl1py.SDL_JoystickGetBall(*args)
SDL_JoystickGetBall = _sdl1py.SDL_JoystickGetBall

def SDL_NumJoysticks() -> "int" :
  return _sdl1py.SDL_NumJoysticks()
SDL_NumJoysticks = _sdl1py.SDL_NumJoysticks

def SDL_JoystickName(*args) -> "char const *" :
  return _sdl1py.SDL_JoystickName(*args)
SDL_JoystickName = _sdl1py.SDL_JoystickName

def SDL_JoystickOpen(*args) -> "SDL_Joystick *" :
  return _sdl1py.SDL_JoystickOpen(*args)
SDL_JoystickOpen = _sdl1py.SDL_JoystickOpen

def SDL_JoystickOpened(*args) -> "int" :
  return _sdl1py.SDL_JoystickOpened(*args)
SDL_JoystickOpened = _sdl1py.SDL_JoystickOpened

def SDL_JoystickIndex(*args) -> "int" :
  return _sdl1py.SDL_JoystickIndex(*args)
SDL_JoystickIndex = _sdl1py.SDL_JoystickIndex

def SDL_JoystickNumAxes(*args) -> "int" :
  return _sdl1py.SDL_JoystickNumAxes(*args)
SDL_JoystickNumAxes = _sdl1py.SDL_JoystickNumAxes

def SDL_JoystickNumBalls(*args) -> "int" :
  return _sdl1py.SDL_JoystickNumBalls(*args)
SDL_JoystickNumBalls = _sdl1py.SDL_JoystickNumBalls

def SDL_JoystickNumHats(*args) -> "int" :
  return _sdl1py.SDL_JoystickNumHats(*args)
SDL_JoystickNumHats = _sdl1py.SDL_JoystickNumHats

def SDL_JoystickNumButtons(*args) -> "int" :
  return _sdl1py.SDL_JoystickNumButtons(*args)
SDL_JoystickNumButtons = _sdl1py.SDL_JoystickNumButtons

def SDL_JoystickUpdate() -> "void" :
  return _sdl1py.SDL_JoystickUpdate()
SDL_JoystickUpdate = _sdl1py.SDL_JoystickUpdate

def SDL_JoystickEventState(*args) -> "int" :
  return _sdl1py.SDL_JoystickEventState(*args)
SDL_JoystickEventState = _sdl1py.SDL_JoystickEventState

def SDL_JoystickGetAxis(*args) -> "Sint16" :
  return _sdl1py.SDL_JoystickGetAxis(*args)
SDL_JoystickGetAxis = _sdl1py.SDL_JoystickGetAxis
SDL_HAT_CENTERED = _sdl1py.SDL_HAT_CENTERED
SDL_HAT_UP = _sdl1py.SDL_HAT_UP
SDL_HAT_RIGHT = _sdl1py.SDL_HAT_RIGHT
SDL_HAT_DOWN = _sdl1py.SDL_HAT_DOWN
SDL_HAT_LEFT = _sdl1py.SDL_HAT_LEFT
SDL_HAT_RIGHTUP = _sdl1py.SDL_HAT_RIGHTUP
SDL_HAT_RIGHTDOWN = _sdl1py.SDL_HAT_RIGHTDOWN
SDL_HAT_LEFTUP = _sdl1py.SDL_HAT_LEFTUP
SDL_HAT_LEFTDOWN = _sdl1py.SDL_HAT_LEFTDOWN

def SDL_JoystickGetHat(*args) -> "Uint8" :
  return _sdl1py.SDL_JoystickGetHat(*args)
SDL_JoystickGetHat = _sdl1py.SDL_JoystickGetHat

def SDL_JoystickGetButton(*args) -> "Uint8" :
  return _sdl1py.SDL_JoystickGetButton(*args)
SDL_JoystickGetButton = _sdl1py.SDL_JoystickGetButton

def SDL_JoystickClose(*args) -> "void" :
  return _sdl1py.SDL_JoystickClose(*args)
SDL_JoystickClose = _sdl1py.SDL_JoystickClose

def SDL_GetPlatformName() -> "char const *" :
  return _sdl1py.SDL_GetPlatformName()
SDL_GetPlatformName = _sdl1py.SDL_GetPlatformName
SDL_ALPHA_OPAQUE = _sdl1py.SDL_ALPHA_OPAQUE
SDL_ALPHA_TRANSPARENT = _sdl1py.SDL_ALPHA_TRANSPARENT
class SDL_Rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _sdl1py.SDL_Rect_x_set
    __swig_getmethods__["x"] = _sdl1py.SDL_Rect_x_get
    if _newclass:x = _swig_property(_sdl1py.SDL_Rect_x_get, _sdl1py.SDL_Rect_x_set)
    __swig_setmethods__["y"] = _sdl1py.SDL_Rect_y_set
    __swig_getmethods__["y"] = _sdl1py.SDL_Rect_y_get
    if _newclass:y = _swig_property(_sdl1py.SDL_Rect_y_get, _sdl1py.SDL_Rect_y_set)
    __swig_setmethods__["w"] = _sdl1py.SDL_Rect_w_set
    __swig_getmethods__["w"] = _sdl1py.SDL_Rect_w_get
    if _newclass:w = _swig_property(_sdl1py.SDL_Rect_w_get, _sdl1py.SDL_Rect_w_set)
    __swig_setmethods__["h"] = _sdl1py.SDL_Rect_h_set
    __swig_getmethods__["h"] = _sdl1py.SDL_Rect_h_get
    if _newclass:h = _swig_property(_sdl1py.SDL_Rect_h_get, _sdl1py.SDL_Rect_h_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_Rect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_Rect
    __del__ = lambda self : None;
SDL_Rect_swigregister = _sdl1py.SDL_Rect_swigregister
SDL_Rect_swigregister(SDL_Rect)

class SDL_Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _sdl1py.SDL_Color_r_set
    __swig_getmethods__["r"] = _sdl1py.SDL_Color_r_get
    if _newclass:r = _swig_property(_sdl1py.SDL_Color_r_get, _sdl1py.SDL_Color_r_set)
    __swig_setmethods__["g"] = _sdl1py.SDL_Color_g_set
    __swig_getmethods__["g"] = _sdl1py.SDL_Color_g_get
    if _newclass:g = _swig_property(_sdl1py.SDL_Color_g_get, _sdl1py.SDL_Color_g_set)
    __swig_setmethods__["b"] = _sdl1py.SDL_Color_b_set
    __swig_getmethods__["b"] = _sdl1py.SDL_Color_b_get
    if _newclass:b = _swig_property(_sdl1py.SDL_Color_b_get, _sdl1py.SDL_Color_b_set)
    __swig_setmethods__["unused"] = _sdl1py.SDL_Color_unused_set
    __swig_getmethods__["unused"] = _sdl1py.SDL_Color_unused_get
    if _newclass:unused = _swig_property(_sdl1py.SDL_Color_unused_get, _sdl1py.SDL_Color_unused_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_Color()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_Color
    __del__ = lambda self : None;
SDL_Color_swigregister = _sdl1py.SDL_Color_swigregister
SDL_Color_swigregister(SDL_Color)

class SDL_Palette(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Palette, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Palette, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ncolors"] = _sdl1py.SDL_Palette_ncolors_set
    __swig_getmethods__["ncolors"] = _sdl1py.SDL_Palette_ncolors_get
    if _newclass:ncolors = _swig_property(_sdl1py.SDL_Palette_ncolors_get, _sdl1py.SDL_Palette_ncolors_set)
    __swig_setmethods__["colors"] = _sdl1py.SDL_Palette_colors_set
    __swig_getmethods__["colors"] = _sdl1py.SDL_Palette_colors_get
    if _newclass:colors = _swig_property(_sdl1py.SDL_Palette_colors_get, _sdl1py.SDL_Palette_colors_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_Palette()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_Palette
    __del__ = lambda self : None;
SDL_Palette_swigregister = _sdl1py.SDL_Palette_swigregister
SDL_Palette_swigregister(SDL_Palette)

class SDL_PixelFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_PixelFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_PixelFormat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["palette"] = _sdl1py.SDL_PixelFormat_palette_set
    __swig_getmethods__["palette"] = _sdl1py.SDL_PixelFormat_palette_get
    if _newclass:palette = _swig_property(_sdl1py.SDL_PixelFormat_palette_get, _sdl1py.SDL_PixelFormat_palette_set)
    __swig_setmethods__["BitsPerPixel"] = _sdl1py.SDL_PixelFormat_BitsPerPixel_set
    __swig_getmethods__["BitsPerPixel"] = _sdl1py.SDL_PixelFormat_BitsPerPixel_get
    if _newclass:BitsPerPixel = _swig_property(_sdl1py.SDL_PixelFormat_BitsPerPixel_get, _sdl1py.SDL_PixelFormat_BitsPerPixel_set)
    __swig_setmethods__["BytesPerPixel"] = _sdl1py.SDL_PixelFormat_BytesPerPixel_set
    __swig_getmethods__["BytesPerPixel"] = _sdl1py.SDL_PixelFormat_BytesPerPixel_get
    if _newclass:BytesPerPixel = _swig_property(_sdl1py.SDL_PixelFormat_BytesPerPixel_get, _sdl1py.SDL_PixelFormat_BytesPerPixel_set)
    __swig_setmethods__["Rloss"] = _sdl1py.SDL_PixelFormat_Rloss_set
    __swig_getmethods__["Rloss"] = _sdl1py.SDL_PixelFormat_Rloss_get
    if _newclass:Rloss = _swig_property(_sdl1py.SDL_PixelFormat_Rloss_get, _sdl1py.SDL_PixelFormat_Rloss_set)
    __swig_setmethods__["Gloss"] = _sdl1py.SDL_PixelFormat_Gloss_set
    __swig_getmethods__["Gloss"] = _sdl1py.SDL_PixelFormat_Gloss_get
    if _newclass:Gloss = _swig_property(_sdl1py.SDL_PixelFormat_Gloss_get, _sdl1py.SDL_PixelFormat_Gloss_set)
    __swig_setmethods__["Bloss"] = _sdl1py.SDL_PixelFormat_Bloss_set
    __swig_getmethods__["Bloss"] = _sdl1py.SDL_PixelFormat_Bloss_get
    if _newclass:Bloss = _swig_property(_sdl1py.SDL_PixelFormat_Bloss_get, _sdl1py.SDL_PixelFormat_Bloss_set)
    __swig_setmethods__["Aloss"] = _sdl1py.SDL_PixelFormat_Aloss_set
    __swig_getmethods__["Aloss"] = _sdl1py.SDL_PixelFormat_Aloss_get
    if _newclass:Aloss = _swig_property(_sdl1py.SDL_PixelFormat_Aloss_get, _sdl1py.SDL_PixelFormat_Aloss_set)
    __swig_setmethods__["Rshift"] = _sdl1py.SDL_PixelFormat_Rshift_set
    __swig_getmethods__["Rshift"] = _sdl1py.SDL_PixelFormat_Rshift_get
    if _newclass:Rshift = _swig_property(_sdl1py.SDL_PixelFormat_Rshift_get, _sdl1py.SDL_PixelFormat_Rshift_set)
    __swig_setmethods__["Gshift"] = _sdl1py.SDL_PixelFormat_Gshift_set
    __swig_getmethods__["Gshift"] = _sdl1py.SDL_PixelFormat_Gshift_get
    if _newclass:Gshift = _swig_property(_sdl1py.SDL_PixelFormat_Gshift_get, _sdl1py.SDL_PixelFormat_Gshift_set)
    __swig_setmethods__["Bshift"] = _sdl1py.SDL_PixelFormat_Bshift_set
    __swig_getmethods__["Bshift"] = _sdl1py.SDL_PixelFormat_Bshift_get
    if _newclass:Bshift = _swig_property(_sdl1py.SDL_PixelFormat_Bshift_get, _sdl1py.SDL_PixelFormat_Bshift_set)
    __swig_setmethods__["Ashift"] = _sdl1py.SDL_PixelFormat_Ashift_set
    __swig_getmethods__["Ashift"] = _sdl1py.SDL_PixelFormat_Ashift_get
    if _newclass:Ashift = _swig_property(_sdl1py.SDL_PixelFormat_Ashift_get, _sdl1py.SDL_PixelFormat_Ashift_set)
    __swig_setmethods__["Rmask"] = _sdl1py.SDL_PixelFormat_Rmask_set
    __swig_getmethods__["Rmask"] = _sdl1py.SDL_PixelFormat_Rmask_get
    if _newclass:Rmask = _swig_property(_sdl1py.SDL_PixelFormat_Rmask_get, _sdl1py.SDL_PixelFormat_Rmask_set)
    __swig_setmethods__["Gmask"] = _sdl1py.SDL_PixelFormat_Gmask_set
    __swig_getmethods__["Gmask"] = _sdl1py.SDL_PixelFormat_Gmask_get
    if _newclass:Gmask = _swig_property(_sdl1py.SDL_PixelFormat_Gmask_get, _sdl1py.SDL_PixelFormat_Gmask_set)
    __swig_setmethods__["Bmask"] = _sdl1py.SDL_PixelFormat_Bmask_set
    __swig_getmethods__["Bmask"] = _sdl1py.SDL_PixelFormat_Bmask_get
    if _newclass:Bmask = _swig_property(_sdl1py.SDL_PixelFormat_Bmask_get, _sdl1py.SDL_PixelFormat_Bmask_set)
    __swig_setmethods__["Amask"] = _sdl1py.SDL_PixelFormat_Amask_set
    __swig_getmethods__["Amask"] = _sdl1py.SDL_PixelFormat_Amask_get
    if _newclass:Amask = _swig_property(_sdl1py.SDL_PixelFormat_Amask_get, _sdl1py.SDL_PixelFormat_Amask_set)
    __swig_setmethods__["colorkey"] = _sdl1py.SDL_PixelFormat_colorkey_set
    __swig_getmethods__["colorkey"] = _sdl1py.SDL_PixelFormat_colorkey_get
    if _newclass:colorkey = _swig_property(_sdl1py.SDL_PixelFormat_colorkey_get, _sdl1py.SDL_PixelFormat_colorkey_set)
    __swig_setmethods__["alpha"] = _sdl1py.SDL_PixelFormat_alpha_set
    __swig_getmethods__["alpha"] = _sdl1py.SDL_PixelFormat_alpha_get
    if _newclass:alpha = _swig_property(_sdl1py.SDL_PixelFormat_alpha_get, _sdl1py.SDL_PixelFormat_alpha_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_PixelFormat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_PixelFormat
    __del__ = lambda self : None;
SDL_PixelFormat_swigregister = _sdl1py.SDL_PixelFormat_swigregister
SDL_PixelFormat_swigregister(SDL_PixelFormat)

class SDL_Surface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Surface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Surface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _sdl1py.SDL_Surface_flags_set
    __swig_getmethods__["flags"] = _sdl1py.SDL_Surface_flags_get
    if _newclass:flags = _swig_property(_sdl1py.SDL_Surface_flags_get, _sdl1py.SDL_Surface_flags_set)
    __swig_setmethods__["format"] = _sdl1py.SDL_Surface_format_set
    __swig_getmethods__["format"] = _sdl1py.SDL_Surface_format_get
    if _newclass:format = _swig_property(_sdl1py.SDL_Surface_format_get, _sdl1py.SDL_Surface_format_set)
    __swig_setmethods__["w"] = _sdl1py.SDL_Surface_w_set
    __swig_getmethods__["w"] = _sdl1py.SDL_Surface_w_get
    if _newclass:w = _swig_property(_sdl1py.SDL_Surface_w_get, _sdl1py.SDL_Surface_w_set)
    __swig_setmethods__["h"] = _sdl1py.SDL_Surface_h_set
    __swig_getmethods__["h"] = _sdl1py.SDL_Surface_h_get
    if _newclass:h = _swig_property(_sdl1py.SDL_Surface_h_get, _sdl1py.SDL_Surface_h_set)
    __swig_setmethods__["pitch"] = _sdl1py.SDL_Surface_pitch_set
    __swig_getmethods__["pitch"] = _sdl1py.SDL_Surface_pitch_get
    if _newclass:pitch = _swig_property(_sdl1py.SDL_Surface_pitch_get, _sdl1py.SDL_Surface_pitch_set)
    __swig_setmethods__["pixels"] = _sdl1py.SDL_Surface_pixels_set
    __swig_getmethods__["pixels"] = _sdl1py.SDL_Surface_pixels_get
    if _newclass:pixels = _swig_property(_sdl1py.SDL_Surface_pixels_get, _sdl1py.SDL_Surface_pixels_set)
    __swig_setmethods__["offset"] = _sdl1py.SDL_Surface_offset_set
    __swig_getmethods__["offset"] = _sdl1py.SDL_Surface_offset_get
    if _newclass:offset = _swig_property(_sdl1py.SDL_Surface_offset_get, _sdl1py.SDL_Surface_offset_set)
    __swig_setmethods__["hwdata"] = _sdl1py.SDL_Surface_hwdata_set
    __swig_getmethods__["hwdata"] = _sdl1py.SDL_Surface_hwdata_get
    if _newclass:hwdata = _swig_property(_sdl1py.SDL_Surface_hwdata_get, _sdl1py.SDL_Surface_hwdata_set)
    __swig_setmethods__["clip_rect"] = _sdl1py.SDL_Surface_clip_rect_set
    __swig_getmethods__["clip_rect"] = _sdl1py.SDL_Surface_clip_rect_get
    if _newclass:clip_rect = _swig_property(_sdl1py.SDL_Surface_clip_rect_get, _sdl1py.SDL_Surface_clip_rect_set)
    __swig_setmethods__["unused1"] = _sdl1py.SDL_Surface_unused1_set
    __swig_getmethods__["unused1"] = _sdl1py.SDL_Surface_unused1_get
    if _newclass:unused1 = _swig_property(_sdl1py.SDL_Surface_unused1_get, _sdl1py.SDL_Surface_unused1_set)
    __swig_setmethods__["locked"] = _sdl1py.SDL_Surface_locked_set
    __swig_getmethods__["locked"] = _sdl1py.SDL_Surface_locked_get
    if _newclass:locked = _swig_property(_sdl1py.SDL_Surface_locked_get, _sdl1py.SDL_Surface_locked_set)
    __swig_setmethods__["map"] = _sdl1py.SDL_Surface_map_set
    __swig_getmethods__["map"] = _sdl1py.SDL_Surface_map_get
    if _newclass:map = _swig_property(_sdl1py.SDL_Surface_map_get, _sdl1py.SDL_Surface_map_set)
    __swig_setmethods__["format_version"] = _sdl1py.SDL_Surface_format_version_set
    __swig_getmethods__["format_version"] = _sdl1py.SDL_Surface_format_version_get
    if _newclass:format_version = _swig_property(_sdl1py.SDL_Surface_format_version_get, _sdl1py.SDL_Surface_format_version_set)
    __swig_setmethods__["refcount"] = _sdl1py.SDL_Surface_refcount_set
    __swig_getmethods__["refcount"] = _sdl1py.SDL_Surface_refcount_get
    if _newclass:refcount = _swig_property(_sdl1py.SDL_Surface_refcount_get, _sdl1py.SDL_Surface_refcount_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_Surface()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_Surface
    __del__ = lambda self : None;
SDL_Surface_swigregister = _sdl1py.SDL_Surface_swigregister
SDL_Surface_swigregister(SDL_Surface)

SDL_SWSURFACE = _sdl1py.SDL_SWSURFACE
SDL_HWSURFACE = _sdl1py.SDL_HWSURFACE
SDL_ASYNCBLIT = _sdl1py.SDL_ASYNCBLIT
SDL_ANYFORMAT = _sdl1py.SDL_ANYFORMAT
SDL_HWPALETTE = _sdl1py.SDL_HWPALETTE
SDL_DOUBLEBUF = _sdl1py.SDL_DOUBLEBUF
SDL_FULLSCREEN = _sdl1py.SDL_FULLSCREEN
SDL_OPENGL = _sdl1py.SDL_OPENGL
SDL_OPENGLBLIT = _sdl1py.SDL_OPENGLBLIT
SDL_RESIZABLE = _sdl1py.SDL_RESIZABLE
SDL_NOFRAME = _sdl1py.SDL_NOFRAME
SDL_HWACCEL = _sdl1py.SDL_HWACCEL
SDL_SRCCOLORKEY = _sdl1py.SDL_SRCCOLORKEY
SDL_RLEACCELOK = _sdl1py.SDL_RLEACCELOK
SDL_RLEACCEL = _sdl1py.SDL_RLEACCEL
SDL_SRCALPHA = _sdl1py.SDL_SRCALPHA
SDL_PREALLOC = _sdl1py.SDL_PREALLOC
class SDL_VideoInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_VideoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_VideoInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hw_available"] = _sdl1py.SDL_VideoInfo_hw_available_set
    __swig_getmethods__["hw_available"] = _sdl1py.SDL_VideoInfo_hw_available_get
    if _newclass:hw_available = _swig_property(_sdl1py.SDL_VideoInfo_hw_available_get, _sdl1py.SDL_VideoInfo_hw_available_set)
    __swig_setmethods__["wm_available"] = _sdl1py.SDL_VideoInfo_wm_available_set
    __swig_getmethods__["wm_available"] = _sdl1py.SDL_VideoInfo_wm_available_get
    if _newclass:wm_available = _swig_property(_sdl1py.SDL_VideoInfo_wm_available_get, _sdl1py.SDL_VideoInfo_wm_available_set)
    __swig_setmethods__["UnusedBits1"] = _sdl1py.SDL_VideoInfo_UnusedBits1_set
    __swig_getmethods__["UnusedBits1"] = _sdl1py.SDL_VideoInfo_UnusedBits1_get
    if _newclass:UnusedBits1 = _swig_property(_sdl1py.SDL_VideoInfo_UnusedBits1_get, _sdl1py.SDL_VideoInfo_UnusedBits1_set)
    __swig_setmethods__["UnusedBits2"] = _sdl1py.SDL_VideoInfo_UnusedBits2_set
    __swig_getmethods__["UnusedBits2"] = _sdl1py.SDL_VideoInfo_UnusedBits2_get
    if _newclass:UnusedBits2 = _swig_property(_sdl1py.SDL_VideoInfo_UnusedBits2_get, _sdl1py.SDL_VideoInfo_UnusedBits2_set)
    __swig_setmethods__["blit_hw"] = _sdl1py.SDL_VideoInfo_blit_hw_set
    __swig_getmethods__["blit_hw"] = _sdl1py.SDL_VideoInfo_blit_hw_get
    if _newclass:blit_hw = _swig_property(_sdl1py.SDL_VideoInfo_blit_hw_get, _sdl1py.SDL_VideoInfo_blit_hw_set)
    __swig_setmethods__["blit_hw_CC"] = _sdl1py.SDL_VideoInfo_blit_hw_CC_set
    __swig_getmethods__["blit_hw_CC"] = _sdl1py.SDL_VideoInfo_blit_hw_CC_get
    if _newclass:blit_hw_CC = _swig_property(_sdl1py.SDL_VideoInfo_blit_hw_CC_get, _sdl1py.SDL_VideoInfo_blit_hw_CC_set)
    __swig_setmethods__["blit_hw_A"] = _sdl1py.SDL_VideoInfo_blit_hw_A_set
    __swig_getmethods__["blit_hw_A"] = _sdl1py.SDL_VideoInfo_blit_hw_A_get
    if _newclass:blit_hw_A = _swig_property(_sdl1py.SDL_VideoInfo_blit_hw_A_get, _sdl1py.SDL_VideoInfo_blit_hw_A_set)
    __swig_setmethods__["blit_sw"] = _sdl1py.SDL_VideoInfo_blit_sw_set
    __swig_getmethods__["blit_sw"] = _sdl1py.SDL_VideoInfo_blit_sw_get
    if _newclass:blit_sw = _swig_property(_sdl1py.SDL_VideoInfo_blit_sw_get, _sdl1py.SDL_VideoInfo_blit_sw_set)
    __swig_setmethods__["blit_sw_CC"] = _sdl1py.SDL_VideoInfo_blit_sw_CC_set
    __swig_getmethods__["blit_sw_CC"] = _sdl1py.SDL_VideoInfo_blit_sw_CC_get
    if _newclass:blit_sw_CC = _swig_property(_sdl1py.SDL_VideoInfo_blit_sw_CC_get, _sdl1py.SDL_VideoInfo_blit_sw_CC_set)
    __swig_setmethods__["blit_sw_A"] = _sdl1py.SDL_VideoInfo_blit_sw_A_set
    __swig_getmethods__["blit_sw_A"] = _sdl1py.SDL_VideoInfo_blit_sw_A_get
    if _newclass:blit_sw_A = _swig_property(_sdl1py.SDL_VideoInfo_blit_sw_A_get, _sdl1py.SDL_VideoInfo_blit_sw_A_set)
    __swig_setmethods__["blit_fill"] = _sdl1py.SDL_VideoInfo_blit_fill_set
    __swig_getmethods__["blit_fill"] = _sdl1py.SDL_VideoInfo_blit_fill_get
    if _newclass:blit_fill = _swig_property(_sdl1py.SDL_VideoInfo_blit_fill_get, _sdl1py.SDL_VideoInfo_blit_fill_set)
    __swig_setmethods__["UnusedBits3"] = _sdl1py.SDL_VideoInfo_UnusedBits3_set
    __swig_getmethods__["UnusedBits3"] = _sdl1py.SDL_VideoInfo_UnusedBits3_get
    if _newclass:UnusedBits3 = _swig_property(_sdl1py.SDL_VideoInfo_UnusedBits3_get, _sdl1py.SDL_VideoInfo_UnusedBits3_set)
    __swig_setmethods__["video_mem"] = _sdl1py.SDL_VideoInfo_video_mem_set
    __swig_getmethods__["video_mem"] = _sdl1py.SDL_VideoInfo_video_mem_get
    if _newclass:video_mem = _swig_property(_sdl1py.SDL_VideoInfo_video_mem_get, _sdl1py.SDL_VideoInfo_video_mem_set)
    __swig_setmethods__["vfmt"] = _sdl1py.SDL_VideoInfo_vfmt_set
    __swig_getmethods__["vfmt"] = _sdl1py.SDL_VideoInfo_vfmt_get
    if _newclass:vfmt = _swig_property(_sdl1py.SDL_VideoInfo_vfmt_get, _sdl1py.SDL_VideoInfo_vfmt_set)
    __swig_setmethods__["current_w"] = _sdl1py.SDL_VideoInfo_current_w_set
    __swig_getmethods__["current_w"] = _sdl1py.SDL_VideoInfo_current_w_get
    if _newclass:current_w = _swig_property(_sdl1py.SDL_VideoInfo_current_w_get, _sdl1py.SDL_VideoInfo_current_w_set)
    __swig_setmethods__["current_h"] = _sdl1py.SDL_VideoInfo_current_h_set
    __swig_getmethods__["current_h"] = _sdl1py.SDL_VideoInfo_current_h_get
    if _newclass:current_h = _swig_property(_sdl1py.SDL_VideoInfo_current_h_get, _sdl1py.SDL_VideoInfo_current_h_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_VideoInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_VideoInfo
    __del__ = lambda self : None;
SDL_VideoInfo_swigregister = _sdl1py.SDL_VideoInfo_swigregister
SDL_VideoInfo_swigregister(SDL_VideoInfo)

SDL_YV12_OVERLAY = _sdl1py.SDL_YV12_OVERLAY
SDL_IYUV_OVERLAY = _sdl1py.SDL_IYUV_OVERLAY
SDL_YUY2_OVERLAY = _sdl1py.SDL_YUY2_OVERLAY
SDL_UYVY_OVERLAY = _sdl1py.SDL_UYVY_OVERLAY
SDL_YVYU_OVERLAY = _sdl1py.SDL_YVYU_OVERLAY
class SDL_Overlay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Overlay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Overlay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["format"] = _sdl1py.SDL_Overlay_format_set
    __swig_getmethods__["format"] = _sdl1py.SDL_Overlay_format_get
    if _newclass:format = _swig_property(_sdl1py.SDL_Overlay_format_get, _sdl1py.SDL_Overlay_format_set)
    __swig_setmethods__["w"] = _sdl1py.SDL_Overlay_w_set
    __swig_getmethods__["w"] = _sdl1py.SDL_Overlay_w_get
    if _newclass:w = _swig_property(_sdl1py.SDL_Overlay_w_get, _sdl1py.SDL_Overlay_w_set)
    __swig_setmethods__["h"] = _sdl1py.SDL_Overlay_h_set
    __swig_getmethods__["h"] = _sdl1py.SDL_Overlay_h_get
    if _newclass:h = _swig_property(_sdl1py.SDL_Overlay_h_get, _sdl1py.SDL_Overlay_h_set)
    __swig_setmethods__["planes"] = _sdl1py.SDL_Overlay_planes_set
    __swig_getmethods__["planes"] = _sdl1py.SDL_Overlay_planes_get
    if _newclass:planes = _swig_property(_sdl1py.SDL_Overlay_planes_get, _sdl1py.SDL_Overlay_planes_set)
    __swig_setmethods__["pitches"] = _sdl1py.SDL_Overlay_pitches_set
    __swig_getmethods__["pitches"] = _sdl1py.SDL_Overlay_pitches_get
    if _newclass:pitches = _swig_property(_sdl1py.SDL_Overlay_pitches_get, _sdl1py.SDL_Overlay_pitches_set)
    __swig_setmethods__["pixels"] = _sdl1py.SDL_Overlay_pixels_set
    __swig_getmethods__["pixels"] = _sdl1py.SDL_Overlay_pixels_get
    if _newclass:pixels = _swig_property(_sdl1py.SDL_Overlay_pixels_get, _sdl1py.SDL_Overlay_pixels_set)
    __swig_setmethods__["hwfuncs"] = _sdl1py.SDL_Overlay_hwfuncs_set
    __swig_getmethods__["hwfuncs"] = _sdl1py.SDL_Overlay_hwfuncs_get
    if _newclass:hwfuncs = _swig_property(_sdl1py.SDL_Overlay_hwfuncs_get, _sdl1py.SDL_Overlay_hwfuncs_set)
    __swig_setmethods__["hwdata"] = _sdl1py.SDL_Overlay_hwdata_set
    __swig_getmethods__["hwdata"] = _sdl1py.SDL_Overlay_hwdata_get
    if _newclass:hwdata = _swig_property(_sdl1py.SDL_Overlay_hwdata_get, _sdl1py.SDL_Overlay_hwdata_set)
    __swig_setmethods__["hw_overlay"] = _sdl1py.SDL_Overlay_hw_overlay_set
    __swig_getmethods__["hw_overlay"] = _sdl1py.SDL_Overlay_hw_overlay_get
    if _newclass:hw_overlay = _swig_property(_sdl1py.SDL_Overlay_hw_overlay_get, _sdl1py.SDL_Overlay_hw_overlay_set)
    __swig_setmethods__["UnusedBits"] = _sdl1py.SDL_Overlay_UnusedBits_set
    __swig_getmethods__["UnusedBits"] = _sdl1py.SDL_Overlay_UnusedBits_get
    if _newclass:UnusedBits = _swig_property(_sdl1py.SDL_Overlay_UnusedBits_get, _sdl1py.SDL_Overlay_UnusedBits_set)
    def __init__(self): 
        this = _sdl1py.new_SDL_Overlay()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sdl1py.delete_SDL_Overlay
    __del__ = lambda self : None;
SDL_Overlay_swigregister = _sdl1py.SDL_Overlay_swigregister
SDL_Overlay_swigregister(SDL_Overlay)

SDL_GL_RED_SIZE = _sdl1py.SDL_GL_RED_SIZE
SDL_GL_GREEN_SIZE = _sdl1py.SDL_GL_GREEN_SIZE
SDL_GL_BLUE_SIZE = _sdl1py.SDL_GL_BLUE_SIZE
SDL_GL_ALPHA_SIZE = _sdl1py.SDL_GL_ALPHA_SIZE
SDL_GL_BUFFER_SIZE = _sdl1py.SDL_GL_BUFFER_SIZE
SDL_GL_DOUBLEBUFFER = _sdl1py.SDL_GL_DOUBLEBUFFER
SDL_GL_DEPTH_SIZE = _sdl1py.SDL_GL_DEPTH_SIZE
SDL_GL_STENCIL_SIZE = _sdl1py.SDL_GL_STENCIL_SIZE
SDL_GL_ACCUM_RED_SIZE = _sdl1py.SDL_GL_ACCUM_RED_SIZE
SDL_GL_ACCUM_GREEN_SIZE = _sdl1py.SDL_GL_ACCUM_GREEN_SIZE
SDL_GL_ACCUM_BLUE_SIZE = _sdl1py.SDL_GL_ACCUM_BLUE_SIZE
SDL_GL_ACCUM_ALPHA_SIZE = _sdl1py.SDL_GL_ACCUM_ALPHA_SIZE
SDL_GL_STEREO = _sdl1py.SDL_GL_STEREO
SDL_GL_MULTISAMPLEBUFFERS = _sdl1py.SDL_GL_MULTISAMPLEBUFFERS
SDL_GL_MULTISAMPLESAMPLES = _sdl1py.SDL_GL_MULTISAMPLESAMPLES
SDL_GL_ACCELERATED_VISUAL = _sdl1py.SDL_GL_ACCELERATED_VISUAL
SDL_GL_SWAP_CONTROL = _sdl1py.SDL_GL_SWAP_CONTROL
SDL_LOGPAL = _sdl1py.SDL_LOGPAL
SDL_PHYSPAL = _sdl1py.SDL_PHYSPAL

def SDL_VideoInit(*args) -> "int" :
  return _sdl1py.SDL_VideoInit(*args)
SDL_VideoInit = _sdl1py.SDL_VideoInit

def SDL_VideoQuit() -> "void" :
  return _sdl1py.SDL_VideoQuit()
SDL_VideoQuit = _sdl1py.SDL_VideoQuit

def SDL_VideoDriverName(*args) -> "char *" :
  return _sdl1py.SDL_VideoDriverName(*args)
SDL_VideoDriverName = _sdl1py.SDL_VideoDriverName

def SDL_GetVideoSurface() -> "SDL_Surface *" :
  return _sdl1py.SDL_GetVideoSurface()
SDL_GetVideoSurface = _sdl1py.SDL_GetVideoSurface

def SDL_GetVideoInfo() -> "SDL_VideoInfo const *" :
  return _sdl1py.SDL_GetVideoInfo()
SDL_GetVideoInfo = _sdl1py.SDL_GetVideoInfo

def SDL_VideoModeOK(*args) -> "int" :
  return _sdl1py.SDL_VideoModeOK(*args)
SDL_VideoModeOK = _sdl1py.SDL_VideoModeOK

def SDL_ListModes(*args) -> "SDL_Rect **" :
  return _sdl1py.SDL_ListModes(*args)
SDL_ListModes = _sdl1py.SDL_ListModes

def SDL_SetVideoMode(*args) -> "SDL_Surface *" :
  return _sdl1py.SDL_SetVideoMode(*args)
SDL_SetVideoMode = _sdl1py.SDL_SetVideoMode

def SDL_UpdateRects(*args) -> "void" :
  return _sdl1py.SDL_UpdateRects(*args)
SDL_UpdateRects = _sdl1py.SDL_UpdateRects

def SDL_UpdateRect(*args) -> "void" :
  return _sdl1py.SDL_UpdateRect(*args)
SDL_UpdateRect = _sdl1py.SDL_UpdateRect

def SDL_Flip(*args) -> "int" :
  return _sdl1py.SDL_Flip(*args)
SDL_Flip = _sdl1py.SDL_Flip

def SDL_SetGamma(*args) -> "int" :
  return _sdl1py.SDL_SetGamma(*args)
SDL_SetGamma = _sdl1py.SDL_SetGamma

def SDL_SetGammaRamp(*args) -> "int" :
  return _sdl1py.SDL_SetGammaRamp(*args)
SDL_SetGammaRamp = _sdl1py.SDL_SetGammaRamp

def SDL_GetGammaRamp(*args) -> "int" :
  return _sdl1py.SDL_GetGammaRamp(*args)
SDL_GetGammaRamp = _sdl1py.SDL_GetGammaRamp

def SDL_SetColors(*args) -> "int" :
  return _sdl1py.SDL_SetColors(*args)
SDL_SetColors = _sdl1py.SDL_SetColors

def SDL_SetPalette(*args) -> "int" :
  return _sdl1py.SDL_SetPalette(*args)
SDL_SetPalette = _sdl1py.SDL_SetPalette

def SDL_MapRGB(*args) -> "Uint32" :
  return _sdl1py.SDL_MapRGB(*args)
SDL_MapRGB = _sdl1py.SDL_MapRGB

def SDL_MapRGBA(*args) -> "Uint32" :
  return _sdl1py.SDL_MapRGBA(*args)
SDL_MapRGBA = _sdl1py.SDL_MapRGBA

def SDL_GetRGB(*args) -> "void" :
  return _sdl1py.SDL_GetRGB(*args)
SDL_GetRGB = _sdl1py.SDL_GetRGB

def SDL_GetRGBA(*args) -> "void" :
  return _sdl1py.SDL_GetRGBA(*args)
SDL_GetRGBA = _sdl1py.SDL_GetRGBA

def SDL_CreateRGBSurface(*args) -> "SDL_Surface *" :
  return _sdl1py.SDL_CreateRGBSurface(*args)
SDL_CreateRGBSurface = _sdl1py.SDL_CreateRGBSurface

def SDL_CreateRGBSurfaceFrom(*args) -> "SDL_Surface *" :
  return _sdl1py.SDL_CreateRGBSurfaceFrom(*args)
SDL_CreateRGBSurfaceFrom = _sdl1py.SDL_CreateRGBSurfaceFrom

def SDL_FreeSurface(*args) -> "void" :
  return _sdl1py.SDL_FreeSurface(*args)
SDL_FreeSurface = _sdl1py.SDL_FreeSurface

def SDL_LockSurface(*args) -> "int" :
  return _sdl1py.SDL_LockSurface(*args)
SDL_LockSurface = _sdl1py.SDL_LockSurface

def SDL_UnlockSurface(*args) -> "void" :
  return _sdl1py.SDL_UnlockSurface(*args)
SDL_UnlockSurface = _sdl1py.SDL_UnlockSurface

def SDL_LoadBMP_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.SDL_LoadBMP_RW(*args)
SDL_LoadBMP_RW = _sdl1py.SDL_LoadBMP_RW

def SDL_SaveBMP_RW(*args) -> "int" :
  return _sdl1py.SDL_SaveBMP_RW(*args)
SDL_SaveBMP_RW = _sdl1py.SDL_SaveBMP_RW

def SDL_SetColorKey(*args) -> "int" :
  return _sdl1py.SDL_SetColorKey(*args)
SDL_SetColorKey = _sdl1py.SDL_SetColorKey

def SDL_SetAlpha(*args) -> "int" :
  return _sdl1py.SDL_SetAlpha(*args)
SDL_SetAlpha = _sdl1py.SDL_SetAlpha

def SDL_SetClipRect(*args) -> "SDL_bool" :
  return _sdl1py.SDL_SetClipRect(*args)
SDL_SetClipRect = _sdl1py.SDL_SetClipRect

def SDL_GetClipRect(*args) -> "void" :
  return _sdl1py.SDL_GetClipRect(*args)
SDL_GetClipRect = _sdl1py.SDL_GetClipRect

def SDL_ConvertSurface(*args) -> "SDL_Surface *" :
  return _sdl1py.SDL_ConvertSurface(*args)
SDL_ConvertSurface = _sdl1py.SDL_ConvertSurface

def SDL_UpperBlit(*args) -> "int" :
  return _sdl1py.SDL_UpperBlit(*args)
SDL_UpperBlit = _sdl1py.SDL_UpperBlit

def SDL_LowerBlit(*args) -> "int" :
  return _sdl1py.SDL_LowerBlit(*args)
SDL_LowerBlit = _sdl1py.SDL_LowerBlit

def SDL_FillRect(*args) -> "int" :
  return _sdl1py.SDL_FillRect(*args)
SDL_FillRect = _sdl1py.SDL_FillRect

def SDL_DisplayFormat(*args) -> "SDL_Surface *" :
  return _sdl1py.SDL_DisplayFormat(*args)
SDL_DisplayFormat = _sdl1py.SDL_DisplayFormat

def SDL_DisplayFormatAlpha(*args) -> "SDL_Surface *" :
  return _sdl1py.SDL_DisplayFormatAlpha(*args)
SDL_DisplayFormatAlpha = _sdl1py.SDL_DisplayFormatAlpha

def SDL_CreateYUVOverlay(*args) -> "SDL_Overlay *" :
  return _sdl1py.SDL_CreateYUVOverlay(*args)
SDL_CreateYUVOverlay = _sdl1py.SDL_CreateYUVOverlay

def SDL_LockYUVOverlay(*args) -> "int" :
  return _sdl1py.SDL_LockYUVOverlay(*args)
SDL_LockYUVOverlay = _sdl1py.SDL_LockYUVOverlay

def SDL_UnlockYUVOverlay(*args) -> "void" :
  return _sdl1py.SDL_UnlockYUVOverlay(*args)
SDL_UnlockYUVOverlay = _sdl1py.SDL_UnlockYUVOverlay

def SDL_DisplayYUVOverlay(*args) -> "int" :
  return _sdl1py.SDL_DisplayYUVOverlay(*args)
SDL_DisplayYUVOverlay = _sdl1py.SDL_DisplayYUVOverlay

def SDL_FreeYUVOverlay(*args) -> "void" :
  return _sdl1py.SDL_FreeYUVOverlay(*args)
SDL_FreeYUVOverlay = _sdl1py.SDL_FreeYUVOverlay

def SDL_GL_LoadLibrary(*args) -> "int" :
  return _sdl1py.SDL_GL_LoadLibrary(*args)
SDL_GL_LoadLibrary = _sdl1py.SDL_GL_LoadLibrary

def SDL_GL_GetProcAddress(*args) -> "void *" :
  return _sdl1py.SDL_GL_GetProcAddress(*args)
SDL_GL_GetProcAddress = _sdl1py.SDL_GL_GetProcAddress

def SDL_GL_SetAttribute(*args) -> "int" :
  return _sdl1py.SDL_GL_SetAttribute(*args)
SDL_GL_SetAttribute = _sdl1py.SDL_GL_SetAttribute

def SDL_GL_GetAttribute(*args) -> "int" :
  return _sdl1py.SDL_GL_GetAttribute(*args)
SDL_GL_GetAttribute = _sdl1py.SDL_GL_GetAttribute

def SDL_GL_SwapBuffers() -> "void" :
  return _sdl1py.SDL_GL_SwapBuffers()
SDL_GL_SwapBuffers = _sdl1py.SDL_GL_SwapBuffers

def SDL_GL_UpdateRects(*args) -> "void" :
  return _sdl1py.SDL_GL_UpdateRects(*args)
SDL_GL_UpdateRects = _sdl1py.SDL_GL_UpdateRects

def SDL_GL_Lock() -> "void" :
  return _sdl1py.SDL_GL_Lock()
SDL_GL_Lock = _sdl1py.SDL_GL_Lock

def SDL_GL_Unlock() -> "void" :
  return _sdl1py.SDL_GL_Unlock()
SDL_GL_Unlock = _sdl1py.SDL_GL_Unlock

def SDL_WM_SetCaption(*args) -> "void" :
  return _sdl1py.SDL_WM_SetCaption(*args)
SDL_WM_SetCaption = _sdl1py.SDL_WM_SetCaption

def SDL_WM_GetCaption(*args) -> "void" :
  return _sdl1py.SDL_WM_GetCaption(*args)
SDL_WM_GetCaption = _sdl1py.SDL_WM_GetCaption

def SDL_WM_SetIcon(*args) -> "void" :
  return _sdl1py.SDL_WM_SetIcon(*args)
SDL_WM_SetIcon = _sdl1py.SDL_WM_SetIcon

def SDL_WM_IconifyWindow() -> "int" :
  return _sdl1py.SDL_WM_IconifyWindow()
SDL_WM_IconifyWindow = _sdl1py.SDL_WM_IconifyWindow

def SDL_WM_ToggleFullScreen(*args) -> "int" :
  return _sdl1py.SDL_WM_ToggleFullScreen(*args)
SDL_WM_ToggleFullScreen = _sdl1py.SDL_WM_ToggleFullScreen
SDL_GRAB_QUERY = _sdl1py.SDL_GRAB_QUERY
SDL_GRAB_OFF = _sdl1py.SDL_GRAB_OFF
SDL_GRAB_ON = _sdl1py.SDL_GRAB_ON
SDL_GRAB_FULLSCREEN = _sdl1py.SDL_GRAB_FULLSCREEN

def SDL_WM_GrabInput(*args) -> "SDL_GrabMode" :
  return _sdl1py.SDL_WM_GrabInput(*args)
SDL_WM_GrabInput = _sdl1py.SDL_WM_GrabInput

def SDL_SoftStretch(*args) -> "int" :
  return _sdl1py.SDL_SoftStretch(*args)
SDL_SoftStretch = _sdl1py.SDL_SoftStretch

def SDL_MUSTLOCK(*args) -> "int" :
  return _sdl1py.SDL_MUSTLOCK(*args)
SDL_MUSTLOCK = _sdl1py.SDL_MUSTLOCK

def SDL_LoadBMP(*args) -> "SDL_Surface *" :
  return _sdl1py.SDL_LoadBMP(*args)
SDL_LoadBMP = _sdl1py.SDL_LoadBMP

def SDL_BlitSurface(*args) -> "int" :
  return _sdl1py.SDL_BlitSurface(*args)
SDL_BlitSurface = _sdl1py.SDL_BlitSurface
SDL_TIMESLICE = _sdl1py.SDL_TIMESLICE
TIMER_RESOLUTION = _sdl1py.TIMER_RESOLUTION

def SDL_GetTicks() -> "Uint32" :
  return _sdl1py.SDL_GetTicks()
SDL_GetTicks = _sdl1py.SDL_GetTicks

def SDL_Delay(*args) -> "void" :
  return _sdl1py.SDL_Delay(*args)
SDL_Delay = _sdl1py.SDL_Delay

def SDL_SetTimer(*args) -> "int" :
  return _sdl1py.SDL_SetTimer(*args)
SDL_SetTimer = _sdl1py.SDL_SetTimer

def SDL_AddTimer(*args) -> "SDL_TimerID" :
  return _sdl1py.SDL_AddTimer(*args)
SDL_AddTimer = _sdl1py.SDL_AddTimer

def SDL_RemoveTimer(*args) -> "SDL_bool" :
  return _sdl1py.SDL_RemoveTimer(*args)
SDL_RemoveTimer = _sdl1py.SDL_RemoveTimer
SDL_IMAGE_MAJOR_VERSION = _sdl1py.SDL_IMAGE_MAJOR_VERSION
SDL_IMAGE_MINOR_VERSION = _sdl1py.SDL_IMAGE_MINOR_VERSION
SDL_IMAGE_PATCHLEVEL = _sdl1py.SDL_IMAGE_PATCHLEVEL

def IMG_Linked_Version() -> "SDL_version const *" :
  return _sdl1py.IMG_Linked_Version()
IMG_Linked_Version = _sdl1py.IMG_Linked_Version
IMG_INIT_JPG = _sdl1py.IMG_INIT_JPG
IMG_INIT_PNG = _sdl1py.IMG_INIT_PNG
IMG_INIT_TIF = _sdl1py.IMG_INIT_TIF

def IMG_Init(*args) -> "int" :
  return _sdl1py.IMG_Init(*args)
IMG_Init = _sdl1py.IMG_Init

def IMG_Quit() -> "void" :
  return _sdl1py.IMG_Quit()
IMG_Quit = _sdl1py.IMG_Quit

def IMG_LoadTyped_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadTyped_RW(*args)
IMG_LoadTyped_RW = _sdl1py.IMG_LoadTyped_RW

def IMG_Load(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_Load(*args)
IMG_Load = _sdl1py.IMG_Load

def IMG_Load_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_Load_RW(*args)
IMG_Load_RW = _sdl1py.IMG_Load_RW

def IMG_InvertAlpha(*args) -> "int" :
  return _sdl1py.IMG_InvertAlpha(*args)
IMG_InvertAlpha = _sdl1py.IMG_InvertAlpha

def IMG_isICO(*args) -> "int" :
  return _sdl1py.IMG_isICO(*args)
IMG_isICO = _sdl1py.IMG_isICO

def IMG_isCUR(*args) -> "int" :
  return _sdl1py.IMG_isCUR(*args)
IMG_isCUR = _sdl1py.IMG_isCUR

def IMG_isBMP(*args) -> "int" :
  return _sdl1py.IMG_isBMP(*args)
IMG_isBMP = _sdl1py.IMG_isBMP

def IMG_isGIF(*args) -> "int" :
  return _sdl1py.IMG_isGIF(*args)
IMG_isGIF = _sdl1py.IMG_isGIF

def IMG_isJPG(*args) -> "int" :
  return _sdl1py.IMG_isJPG(*args)
IMG_isJPG = _sdl1py.IMG_isJPG

def IMG_isLBM(*args) -> "int" :
  return _sdl1py.IMG_isLBM(*args)
IMG_isLBM = _sdl1py.IMG_isLBM

def IMG_isPCX(*args) -> "int" :
  return _sdl1py.IMG_isPCX(*args)
IMG_isPCX = _sdl1py.IMG_isPCX

def IMG_isPNG(*args) -> "int" :
  return _sdl1py.IMG_isPNG(*args)
IMG_isPNG = _sdl1py.IMG_isPNG

def IMG_isPNM(*args) -> "int" :
  return _sdl1py.IMG_isPNM(*args)
IMG_isPNM = _sdl1py.IMG_isPNM

def IMG_isTIF(*args) -> "int" :
  return _sdl1py.IMG_isTIF(*args)
IMG_isTIF = _sdl1py.IMG_isTIF

def IMG_isXCF(*args) -> "int" :
  return _sdl1py.IMG_isXCF(*args)
IMG_isXCF = _sdl1py.IMG_isXCF

def IMG_isXPM(*args) -> "int" :
  return _sdl1py.IMG_isXPM(*args)
IMG_isXPM = _sdl1py.IMG_isXPM

def IMG_isXV(*args) -> "int" :
  return _sdl1py.IMG_isXV(*args)
IMG_isXV = _sdl1py.IMG_isXV

def IMG_LoadICO_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadICO_RW(*args)
IMG_LoadICO_RW = _sdl1py.IMG_LoadICO_RW

def IMG_LoadCUR_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadCUR_RW(*args)
IMG_LoadCUR_RW = _sdl1py.IMG_LoadCUR_RW

def IMG_LoadBMP_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadBMP_RW(*args)
IMG_LoadBMP_RW = _sdl1py.IMG_LoadBMP_RW

def IMG_LoadGIF_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadGIF_RW(*args)
IMG_LoadGIF_RW = _sdl1py.IMG_LoadGIF_RW

def IMG_LoadJPG_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadJPG_RW(*args)
IMG_LoadJPG_RW = _sdl1py.IMG_LoadJPG_RW

def IMG_LoadLBM_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadLBM_RW(*args)
IMG_LoadLBM_RW = _sdl1py.IMG_LoadLBM_RW

def IMG_LoadPCX_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadPCX_RW(*args)
IMG_LoadPCX_RW = _sdl1py.IMG_LoadPCX_RW

def IMG_LoadPNG_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadPNG_RW(*args)
IMG_LoadPNG_RW = _sdl1py.IMG_LoadPNG_RW

def IMG_LoadPNM_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadPNM_RW(*args)
IMG_LoadPNM_RW = _sdl1py.IMG_LoadPNM_RW

def IMG_LoadTGA_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadTGA_RW(*args)
IMG_LoadTGA_RW = _sdl1py.IMG_LoadTGA_RW

def IMG_LoadTIF_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadTIF_RW(*args)
IMG_LoadTIF_RW = _sdl1py.IMG_LoadTIF_RW

def IMG_LoadXCF_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadXCF_RW(*args)
IMG_LoadXCF_RW = _sdl1py.IMG_LoadXCF_RW

def IMG_LoadXPM_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadXPM_RW(*args)
IMG_LoadXPM_RW = _sdl1py.IMG_LoadXPM_RW

def IMG_LoadXV_RW(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_LoadXV_RW(*args)
IMG_LoadXV_RW = _sdl1py.IMG_LoadXV_RW

def IMG_ReadXPMFromArray(*args) -> "SDL_Surface *" :
  return _sdl1py.IMG_ReadXPMFromArray(*args)
IMG_ReadXPMFromArray = _sdl1py.IMG_ReadXPMFromArray

def SDL_GetPixel(*args) -> "Uint32" :
  return _sdl1py.SDL_GetPixel(*args)
SDL_GetPixel = _sdl1py.SDL_GetPixel

def SDL_PutPixel(*args) -> "void" :
  return _sdl1py.SDL_PutPixel(*args)
SDL_PutPixel = _sdl1py.SDL_PutPixel


